-- MySQL dump 10.19  Distrib 10.3.31-MariaDB, for debian-linux-gnu (x86_64)
--
-- Host: db    Database: myapp_development
-- ------------------------------------------------------
-- Server version	8.0.23

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `ar_internal_metadata`
--

LOCK TABLES `ar_internal_metadata` WRITE;
/*!40000 ALTER TABLE `ar_internal_metadata` DISABLE KEYS */;
INSERT INTO `ar_internal_metadata` VALUES ('environment','development','2021-04-18 19:28:33.955694','2021-04-18 19:28:33.955694');
/*!40000 ALTER TABLE `ar_internal_metadata` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `schema_migrations`
--

LOCK TABLES `schema_migrations` WRITE;
/*!40000 ALTER TABLE `schema_migrations` DISABLE KEYS */;
INSERT INTO `schema_migrations` VALUES ('20210418191217'),('20210421110423'),('20210421112457'),('20210421113250'),('20210421144144'),('20210421144902'),('20210503095325'),('20210517141227');
/*!40000 ALTER TABLE `schema_migrations` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Dumping data for table `study_records`
--

LOCK TABLES `study_records` WRITE;
/*!40000 ALTER TABLE `study_records` DISABLE KEYS */;
INSERT INTO `study_records` VALUES (10,'2021-04-30',4,NULL,'◯編集・更新・削除機能勉強','◯プロゲート学習サービスを利用して、更新・削除機能の方法を習得。\r\n（編集・更新機能）\r\n・editアクションとルーティン・ビューを用意する。\r\n　ビュー内にtextareaを記述して、リンクを作成する。またform_tagで送信する先をupdateアクションに指定する。\r\n・updateアクションとルーティングを記述する。ルーティングはpostで指定する。\r\n　更新に成功した時はサクセスメッセージを表示する。サクセスメッセージはアプリケーションhtmlで記述して、表示内容はコントローラで記述していく。\r\n　更新出来なかった時は、もう一度編集ページへリダイレクトする。\r\n\r\n（削除機能）\r\n・destroyアクションとルーティングを設定。上記同様にpost指定。\r\n　成功したらサクセスメッセージを表示させる。\r\n・update/destroyはビューは用意しない。データを送信する為。','特になし','特になし','一度やったことはある為、復習になりより理解を深めることが出来た。','https://prog-8.com/courses/rails5','・削除・編集機能の実装','2021-04-22 23:06:14.488837','2021-05-03 03:45:50.975292'),(11,'2021-04-13',5,NULL,'・ログイン機能付きの記録ページ作成','◯モデル作成\r\n・既存のファイルにモデルを作成し、dbと連携しようとした。接続できないエラーが発生。\r\n◯Dockerファイルの設定を変更。\r\n・変更後に多くのエラーが出て、解決策を調べる。\r\n','◯モデルやdbについての理解が浅く、身になっていない。','◯エラー内容の解読\r\n・ネットでエラー内容を検索したが、該当しなかったり内容に苦しんだ。','知識が身になっていない状態で、ネットの情報を鵜呑みにした。その結果エラーが多く出たり、原因追求できなかった。もう一度勉強し直した方がいいと考えた。次回の学習はサイト作成を一度止めて、プロゲートにて勉強する。','最終的にコード全削除。','・プロゲートでモデルやdbの勉強。','2021-04-30 11:13:27.897490','2021-04-30 11:13:27.897490'),(12,'2021-04-19',5,NULL,'・プロゲート学習','https://prog-8.com/lessons/rails5/study/2\r\n\r\nhttps://prog-8.com/lessons/rails5/dojo/1\r\n\r\n\r\n','特になし','変数を使って定義し、それをビューに記載する時には苦戦した。','理解に時間は要したが、以前よりかは理解できた。','特になし','・学習した内容を自分のサイトにどのように活かせるのかを考えながら、取り入れていく。\r\n・モデル作成・db作成','2021-04-30 11:32:36.144225','2021-04-30 11:32:36.144225'),(14,'2021-04-20',8,NULL,'◯入力フォーム作成　◯Dockerファイル修正　◯デバック機能追加','◯入力フォーム作成\r\n・ビューを記述し、アクションで変数を定義する。定義した変数を使ってビューにデータベースと繋がるコードを記述していく。\r\n・バリデーションの追加・・・空白欄があると保存出来ないように設定することが出来た。\r\n・for_tagからfor_withメソッドの使用・・・プロゲートではfor_tagを勉強したが、ネットで調べる中でrails5から追加されたとあった。メリットが多く、これから使用していくことを考えて、やり方を変えて修正した。モデル・urlを使用して、ループ処理できるようにもした。\r\n◯Dockerファイル修正\r\n・mysqlがないとエラー発生・・・ネットで検索しても解決出来ず。ヒントをもらい、理解出来た。mysqlを記述方法が変更になった為、エラーが発生していたことがわかった。\r\n・sqlとは・・・データベースを管理するところの名前。それを使ってデータベースの中身を確認したり、変更したりできることを知った。\r\n\r\n◯デバック機能追加\r\n・どこでエラーが起こっているかを知りたかった為、この機能を追加した。\r\n','特になし','デバック機能追加には多くの時間を要した。主に設定してもらった為、今後また機会があれば、やりたい。','バージョンが変わるごとに対応していく柔軟性が必要だと思った。エラーの内容を読み解き、必要な変更ができるようにしていきたい。','特になし','◯投稿が保存され、そのページを表示できるようにする。','2021-04-30 14:40:11.358988','2021-04-30 14:40:11.358988'),(15,'2021-04-21',9,NULL,'◯データベースを利用して、ビューを表示する','◯記録を保存したら、内容を表示する\r\n・保存されたデータを表示したい・・・日付と学習計画のみを取得できるようにした。またそこから記事一覧へと繋がるようにしたい。\r\n・途中で保存内容を表示することが難しかったので、断念。保存されるとすぐに記事一覧へ飛ぶように設定した。\r\n\r\n◯レポート画面や投稿画面の詳細を変更する。\r\n・日付を表示していたドロップダウンメニューをカレンダー形式に変更。\r\n・レポート画面の花枠にリンクをつける。リンク先をクエリを直接書いて記述した。','データベースを呼び出す方法は理解したが、応用するのは難しい。','クエリを調節書く書き方は知らなかった。またそれを個々のリンクとして付与する方法の理解に苦しんだ。最終的には理解して使えるようになった。','呼び出し方には様々な方法があることを理解した。クエリの方法を理解した為、今後活用していきたい。','特になし','◯細かい所のcssを調整','2021-04-30 14:58:53.347583','2021-04-30 14:58:53.347583'),(16,'2021-04-22',7,NULL,'・cssの調整','◯メイン画面のタイトル位置調節\r\n・レスポンシブに対応したタイトル位置の固定がしたい。しかしdeviceごとに設定した位置が大きくなるにつれて少しずつずれていくことがわかった。\r\n（解決するまでに試したこと）\r\n・バックグラウンド画面に配置してタイトル位置のみを動的に動かそうとした。しかしdeviceが変わるごとに位置が変動してしまった。\r\n・ディブタグを追加してボックスの位置を固定した。\r\n（解決方法）\r\n・タイトルを囲むディブを用意して、その大きさを大まかに指定する。その中の文字を中央揃えにすることを解決した。\r\n\r\n◯細かい余白の調節\r\n・deviceによって感じる余白の大きさを調節した。deviceが大きくになるにつれて大きく設定した。','特になし','タイトル文字の固定に時間を要した。きれいに配置する方法が他にもありそうなので、勉強しながら見つけていきたい。','レスポンシブデザインに対応することの難しさを感じた。','特になし','◯レスポンシブデザインに対応したcssの記述','2021-04-30 15:27:32.602775','2021-04-30 15:27:32.602775'),(17,'2021-04-23',3,NULL,'◯css調節','◯学習記録画面のcss記述\r\n・保存されたデータが読みやすいように、表示したい。\r\n→余白やタイトル文字の大きさを確認しながら、調節した。\r\n\r\n◯６００以上のデバイス左右に余白を指定。\r\n・ページを見ていると少し幅が広すぎて違和感を感じるようになった。ネットでサイトまとめを調べる中で、大きな画面には左右に余白があり、それで見やすいサイトになっていることがわかった。\r\n\r\n◯学習記録を月ごとに表示したい。\r\n・クエリパラメータを利用して、記述することが出来た。\r\n・表示する際は日付をタイトルとして適用することにした。\r\n・1日から順番に表示するようにする。\r\n\r\n\r\n\r\n','特になし','特になし','習ったことを動的に応用するスキルは難しいが、出来た時は嬉しかった。','特になし','◯css調節','2021-04-30 15:39:05.682317','2021-04-30 15:39:05.682317'),(18,'2021-04-24',10,NULL,'・css調節','◯レスポンシブデザインとはなにかを理解する。\r\n・どのようなことに重点を置いてデザインしなけばいいかを理解することが出来た。デザインする上で最低限注意することも実装出来ていない部分を変更していく。\r\n\r\n','特になし','特になし','微調節するにはとても時間を要してしまう。簡潔に短時間でかけるように努力していく。','特になし','◯css調整','2021-04-30 15:44:53.669265','2021-04-30 15:44:53.669265'),(19,'2021-04-25',8,NULL,'◯メイン画面の固定・レスポンシブデザインの微調節','◯メイン画面の固定\r\n・レスポンシブデザインに対応した、メイン画面の固定を試みる。前回設定した値だと、h1の下に配置してあるpタグがdeviceごとに幅が変動してしまう。pタグに追加で　div要素をつけたりcssを記述方法を工夫してみたが、上手くいかない。試行錯誤したが、思うような結果にならない為一度コメントアウトして進めることにする。\r\n\r\n◯余白の調節やdeviceごとによるデザインの変更\r\n・余白は600以上に違う値を設定することで、見やすいようにした。中央ぎみに配置した方が見やすく、視線に入りやすいと思う。','・レスポンシブデザインに対応するpタグの動き','・deviceごとに固定された場所からずれないように試行錯誤したが、難しかった。','・作っていく中で見やすいデザインが少しずつわかってきたように思う。レスポンシブデザインはdeviceによって値を変化させたり、固定するのが難しいと感じる。勉強を進める中で、徐々に理解を深めていきたい。','・pタグは一度コメントアウトしている。今後このデザインを使用するかは未定。','◯css調節','2021-05-03 02:39:15.002666','2021-05-03 02:39:15.002666'),(20,'2021-04-26',7,NULL,'・cssの調整','◯文字の大きさ指定方法を変更\r\n・px指定からem指定に変更。bodyタグに62.5％と設定。（1em=10pxとなる）\r\n\r\n◯他人が見ても見やすいコメントアウトの記述。\r\n初めは/* ----- タイトル ----- */のように大見出しをつけていたが、\r\nコードを探す時に見つけづらさを感じた。その為、以下のように記述した。\r\n/* -----------------------------------------\r\nタイトル\r\n-------------------------------------------*/\r\nこのようにすることでとても見やすく、探しているコードを見つけやすくなった。','特になし','特になし','他人が見やすいだけでなく、自分も見つけやすいと効率よく記述できることを実感した。今後はコメントアウトをしっかり記述しながら、進めていきたい。','特になし','◯css調節','2021-05-03 02:54:00.230406','2021-05-03 02:54:00.230406'),(22,'2021-04-27',5,NULL,'◯cssの調整','◯学習記録・記録一覧のcss調節。','特になし','特になし','余白の統一する大切さを知った。統一しないと違和感があるように感じた。','特になし\r\n','css調節','2021-05-03 03:05:18.226490','2021-05-03 03:05:18.226490'),(23,'2021-05-02',5,NULL,'・編集、更新、削除機能の実装','◯編集機能\r\n・get \"posts/:id/edit\" = \"posts#edit\"　・・・ルーティング\r\n・ビュー・コントローラを指定して、ビュー内に入力フォームと同じhtmlを用意する。フォームの送信先はupdateアクションを指定。\r\n\r\n◯更新\r\n・post \"posts/:id/update\" => \"posts#update\" postを指定することで、データを受け取るルーティングを用意する。\r\nコントローラに記述し、ビューは用意しない。\r\n保存に成功したら、記録一覧ページへ行き、サクセスメッセージを表示するように記述した。\r\n\r\n◯削除\r\n・post \"posts/:id/delete\" => \"posts#delete\"\r\nupdateアクションと同じく、ビューファイルは作成しない。\r\n削除したら、記録一覧ページへリダイレクトする。\r\n\r\n◯上記を記述後、保存してブラウザの動きを確認。\r\n・アクションのアクセス時にエラーが発生。編集ページは表示される。まずは更新のアクションから確認していく。パラメータには値が渡ってきている為、更新したい記事内容は取得出来ている。\r\nアクション内を見直し、学習した内容通りに記述したが上手くいかない。','・前回createアクションを記述した時にストロングパラメータを記述している。それで値を保存している為、それを使う必要があると感じた。しかしそのパラメータをどのように使うのかを理解に乏しい。調べながら進めるも、疑問が多い。\r\n','・特になし','ルーティングエラーに対して柔軟に対応することが出来ない。学習した時にはアクションを全て手動で書いているが、調べるうちにresocesというメソッドで定義すると、自動で７つのアクションを生成してくれるというのを発見した。内容を理解して、使えそうであれば書き換えも検討する。','railsのバージョンが変わり、違うルーティングがあるかもしれない為様子を見ていく。','・更新、削除機能の実装を完了。','2021-05-03 09:12:25.157907','2021-05-03 09:12:25.157907'),(24,'2020-12-01',0,20,'・rails レッスン　 ・電子書籍（ITパスポート）','・バリデーションとは不正なデータがデータベースに入力されないようにチェックする仕組みのことをいう。','特になし','特になし','特になし','特になし','記述なし','2021-05-03 09:16:33.937197','2021-05-03 10:23:11.077739'),(25,'2021-05-06',1,0,'あ','あ','あ','あ','あ','あ','あ','2021-05-03 10:19:08.450662','2021-05-03 10:19:08.450662'),(26,'2020-12-02',0,45,'・プロゲート　railsレッスン','・投稿文字数の制限　→　１４０以内に制限するには、lengthを用いて{maximum: 140}とする。\r\n\r\n・間違った内容を入力した際、文字が消えないようにする。\r\n→・renderメソッドを使用して、ビューに直接表示出来るようになる。間違った内容を入力した際、文字が消えないようにする。\r\n\r\n・エラーメッセージを表示する。→.errors.full_messagesと入れることでエラー表示が表示される。\r\n\r\n・フラッシュを表示\r\n→flash変数を使う。flash[:notice]と指定することで、投稿が成功した場合に表示出来るようにする。\r\n','特になし','特になし','記述時、項目なし','特になし','記述なし','2021-05-03 10:26:20.370597','2021-05-03 10:26:20.370597'),(27,'2021-01-01',4,0,'・Reactレッスン３ ・htmlページに問題集・単語集のページ作成後、見出し文字を作成。 ・Reactのレッスンを活かして、ボタンとクラスを作成。 ・iQueryプロゲートレッスン１','（reactレッスン３）\r\n　・モーダルを表示させるには、以下の順序を踏む。\r\n　　①モーダルのjsxを追加する。\r\n　　②初期状態でモーダルを隠す。\r\n　　③モーダルの表示・非表示　　\r\n（Reactを自分が作成しているvsコードに記述）\r\n　・問題集ページの見出し下に配置したい。Reactのreturn内に表示したい内容を記述したが、反映されない。検証で内容を見るとクラスは作れているが、指定した文字や選択肢のボタンが表示されない。\r\n\r\n（iqueryレッスン１）\r\n　・jQueryオブジェクトは、$(\'セレクタ\')とするだけで作成できる。\r\n　＜メソッドの種類＞\r\n　　・hide　→　隠す\r\n　　・fadeOut　→　徐々に消えていくアニメーション。　⇄fadeIN\r\n　　・slideUp　→　端から消えていくアニメーション。　⇄　slideDown\r\n　　※fadeOutとslideUpは（）メソッドの中に1500と入れると、1.5秒かけて　消えるという指定が出来る。\r\n　　・show　→　消えている要素を表示する。\r\n　　・css　→　cssを変更することが出来る。（変更した方が反映される）\r\n　　※css(‘プロパティ名’,’値’)で書くこと。\r\n　　・text　→　textそのものを変更することが出来る。\r\n　　・html　→　htmlを変更出来る。<span>などのタグも入る。\r\n　\r\n　・タグに名前をつける。今まで通りclassは使える。一度しか使えない物と　してidがある。一度しか使えないが、処理速度が早い為iqueryを入れる場合　はidを使うようにする。script・cssには$(‘#id名’)と＃を前につけて記述す　　る。\r\n\r\n　\r\n　・イベントの構文は、$(\'セレクタ\').イベント名(function(){ });　と書く。\r\n　＜イベント名＞\r\n　　・click　→　セレクタがクリックされた時に処理をする。\r\n　　・hover　→　要素にマウスが乗った時に、処理する。\r\n　　※clickイベントとは違い、第一引数、第二引数に分けて書く。その際の　間はカンマで区切る。\r\n\r\n　・this構文について→イベントが起こった要素を取得する。\r\n　　※この時はシングルクォーテーションをつけない。\r\n　\r\n　・セレクタ名が連続する場合は、２つの記述の仕方がある。\r\n　　＜変数＞var 変数名 = $(‘セレクタ名’).css( ~ ~ ) 　※〜は省略部分。\r\n　　＜メソッドチェーン＞\r\n　　（例）$(‘div’).css(‘color’,’red’).html(‘jQuery’); →ドットで区切る。\r\n　\r\n　・findメソッドは、すべての子孫要素(自分よりも下の階層の要素すべて）　の中から、指定したセレクタを持つ要素を取得する時に用いる。\r\n　・childrenメソッドは、指定したセレクタが持つ子要素（一階層だけ下）の中から指定したセレクタに合致した要素を取得したいときに用いる。\r\n','（レッスン３→モーダルについて）\r\n　・アロー関数やプロップス名を使う時などに、（）や；、記述の仕方が違いエラーになる。丁寧に確認しながら進めると、エラーが減ってきた。\r\n\r\n（実際にReactを使う）\r\n　・return内にコードを入れてみたが、反映されない。入れるコードの内容を理解出来ていない為、解決策が思いつかない。その為、プロゲートのjQueryを学びその後にどちらを使ってボタン作成・動きのある物を取り入れるかを考えることにする。\r\n\r\n（iQueryレッスン１）\r\n　・イベントを書く時に、()が抜け上手く表示されないことが数回あった。また()のあとにアロー関数のように=>を入れてしまう癖がある。イベントの際は入れないように気をつけていく必要がある。\r\n　・cssメソッドを書く際は、プロパティ名・値にシングルクォーテーションをつけるのを忘れていることがあった。またその間は . ではなく , となることにも気をつけていきたい。\r\n','特になし','記述時、項目なし','特になし','・iQueryレッスン全て受講。','2021-05-03 10:30:35.180172','2021-05-03 10:30:35.180172'),(28,'2021-01-02',1,30,'・プロゲート　jQueryレッスン中級・中級道場コース','（レッスン中級）\r\n　◯ライブラリの読み込み\r\n　　jQueryを使用するには、jQueryライブラリを読み込む必要がある。ライブラリはインターネット経由で読み込むのが、一般的である。<head>タグの中に<script src=”url></script>を入れることでiQueryが使用出来る。\r\n　◯ファイルの読み込み\r\n　　jQueryはjs形式のファイルの中にコードを書いていく。</body>の直前に置くことでファイルが読み込まれる。<script src=”script.js></scrirt>\r\n　◯型\r\n　　htmlの中身を操作する為、htmlの読み込みが完了してからjQueryによる操作を開始するようにする。その為にはreadyイベントを$(document).ready()の中身にjQueryの処理を書く。省略型は$(function(){ });\r\n　◯＜メソッド＞\r\n　・addClass　→　指定した要素にクラスを追加する。\r\n　・removeClass　→　指定した要素から指定した要素を取り除く。\r\n　・hasClass　→　引数に指定したクラスを、オブジェクトが持っているか　判定する時に使用する。if文を書く。\r\n','（レッスン中級）\r\n　・divタグにclassを二つ入れる場合は、class=” クラス名　クラス名”とダブルクォーテーションの間にスペースをあけて書く。今まで一つのクラスを指定また前回はidクラスを追加しかしたことなかった。今後に活かしていく。\r\n　・セレクタの使い方は理解して、容易にコードを書くことが出来るようになった。しかし、if文の条件式の中を書く際に少し戸惑ってしまう。学習している中でif文は苦手としている為、今後も理解を深めていけるようにしたい。しかし少しずつif文の内容を理解出来ているように感じる。\r\n（レッスン中級道場コース）\r\n　・レッスン中級でやったことを一から自分でコードを書く。しかし一からとなると少し戸惑う部分があり、理解が浅いことを実感した。次回は始めに復習をしてから、この問題に挑戦したい。\r\n','（Reactの実装の仕方と考え方を教えてもらう）\r\n　・プロゲートでやっていた内容は画面上に全てjsファイルやhtmlファイルが用意されていた。しかし現在使っているdockerでは同じようにコードを書くことが難しい。レンダリング（render）は描画処理をする際に使うことも初めて知った。見たことのない単語と習った構文が混合していて、混乱した。内容を聞きながら、自分でも内容理解が少しでも深められるようにネットの情報を使いながら確認をした。少し理解出来たが、全体理解出来ていない為、次回はプロゲートと実際に書くコードの違いについて比較し、理解を深めていきたい。\r\n','記述時、項目なし','特になし','・プロゲートで学んだことと本日教えてもらった内容を比較し、reactの実装方法について理解を深める。\r\n・jQuery中級道場コースの問題１を解決する。\r\n・Reactを実際にサイトに表示する。（htmlページの問題集部分）\r\n','2021-05-03 10:38:01.776787','2021-05-03 10:38:01.776787'),(29,'2021-01-03',5,30,'・プロゲートで学んだことと本日教えてもらった内容を比較し、reactの実装方法について理解を深める。 ・jQuery中級道場コースの問題１を解決する。 ・Reactを実際にサイトに表示する。（htmlページの問題集部分）','（プロゲートのReactレッスン内容とrailsを使って実装する時の比較）\r\n＜再度理解したこと→プロゲートレッスン内容＞\r\n　・renderメソッドのreturn内にコードを書くと、ブラウザに表示される。\r\n　・◯App.jsの構成について。\r\n　　・import React from “react”;　→　①  　　inport（意味：〜に持ち込む）\r\n　　・class App extends React.Components {　　→　②\r\n           render() {　　→　③\r\n\r\n    }           \r\n           }\r\n       ・export default App;  　→　④\r\n　　◯上記の内容\r\n　　　①reactをインポートする。\r\n　　　②React.Componentsを継承するクラスの定義\r\n　　　③jsxを戻り値とするrenderメソッドの定義\r\n　　　④クラスをエクスポートする。\r\n　・java scriptを書く際は、returnの外のrenderメソッド内に記述出来る。jsxにjsを入れたい時は、{   }を使い記述する必要がある。\r\n　・onClickイベントについて\r\n　　<button イベント名={() => { 処理 }}> </button>で書く。\r\n　　→上記をコンソールで表示したい場合は、処理の中にconsole.log()\r\n　　◯stateの定義\r\n　　・ユーザーに合わせて変わる値のことを、reactではstateと呼ぶ。ボタン　　を押すとstateが変わるようにする。\r\n　　・stateを定義するには、construtorの中でオブジェクトとして定義する。\r\n　　（例）tihs.state = {name:”にんじゃわんこ” }\r\n\r\n\r\n\r\n\r\n\r\n　　＜定義内容（例）＞\r\n　　　constructor(props) {\r\n           super(props);\r\n           tihs.state = {name:”にんじゃわんこ” }\r\n           }\r\n        ・propsとは　→　コンポーネント利用時に属性として設定ができる値。\r\n　　・属性とはhtmlの要素に対して性質を与える役割\r\n　　・superとは　→　super(props);としないとthis.stateを定義出来ない。\r\n　　◯stateの表示\r\n　　・定義したstateはthis.stateで取得することが出来る。\r\n　　◯stateの変更\r\n　　・this.setState({プロパティ名：値});とすることで、指定したプロパティ　　に対応するstateの値が変更される。\r\n　　◯メソッドの定義\r\n　　・定義する時はクラスの中にメソッドを記述する。関数と同じように、\r\n       {    }の中に行いたい処理を書く。\r\n　　・stateを変更するメソッドは、handleClickメソッドである。\r\n　　＜定義内容＞\r\n　　　class App extends React.Components  {\r\n           handleClick(name){\r\n            this.setState({name:name});\r\n }}\r\n\r\nrender内\r\n<button onClick={()=>{this.handleClick(“にんじゃわんこ”)}}></button>\r\n※handleClickメソッドの引数にnameを引き渡す。\r\n＜プロゲートレッスン内容を理解した上で、vsコードの内容と比較＞\r\n・scriptとは・・・書いたらすぐに実行出来るプログラムのこと。その中のtext/babelとは属性の値の種類で、その他に値に該当する。テキストとして読み込んでくれる。書いたコードが無視される。\r\n・上記の中にコードを記述していく。\r\n\r\n\r\n　◯レンダリング描画\r\n　・Document の getElementById() メソッドは、 id プロパティが指定され　た文字列に一致する要素を表す Element オブジェクトを返します。要素の 　ID は指定されていれば固有であることが求められているため、特定の要素　にすばやくアクセスするには便利な方法。\r\n','特になし','　上記の内容を含めて、ブラウザに紹介されているコードでボタンを作成した。しかし条件分岐部分のコード内容が理解出来ない。教えてもらっても完全に理解するまでには時間を要すると思う。','記述時、項目なし','特になし','・書いたコードを少しでも理解出来るように復習し、実際に違うページに自分でコードを書いてみる。','2021-05-03 10:40:42.074221','2021-05-03 10:40:42.074221'),(30,'2021-01-05',2,0,'コードの解読','記述なし','記述なし','記述なし','記述時、項目なし','特になし','記述なし','2021-05-03 10:54:54.736866','2021-05-03 10:54:54.736866'),(31,'2021-01-09',2,0,'・Udemy講座をやってみる','◯基本的なツールバーやパネルバーの理解を深める。\r\n◯画像の縮小と拡大\r\n・自由変形ボタンを選択し、シフトキーを押しながら大きさを変更する。\r\n◯フィルター\r\n・上部にあるツールボタンからフィルターを選択し、ぼかしなどを押すと詳細についてのダイアログが開かれる。\r\n◯画像の選択\r\n・左のツールバーから長方形選択ツールを選択し、範囲指定する。編集ボタンからコピーをすると、選択部分のみを別の場所に貼り付けることが出来る。また選択した後はマウスの左クリックから選択解除、または⌘Dで解除を忘れないようにする。\r\n◯ブラシ ツール\r\n・ブラシの詳細設定から色んな効果を選択出来る。建物に星を散らばせ、輝いているように見せることも出来る。またオーロラのようにグラデーションのような効果もつけることが出来る。\r\n◯画像の保存方法\r\n・編集した画像を保存する際は、普通に保存するとウェブで使えない。使えるようにする為には、PNDまたはJPEGに変更してから保存するようにする。\r\n','特になし','・学んでいるサイトのフォトショップのバージョンが違う為、ボタンが探せず時間を要することがあった。臨機応変に対応していきたい。','記述時、項目なし','https://www.udemy.com/course/web-design-master/','上記の続き','2021-05-03 10:57:04.003115','2021-05-03 11:00:20.005085'),(32,'2021-01-10',3,0,'・Udemyレッスン','◯色調補正パネル\r\n・このパネルはコントラストや明るさ、画像の一部分のみを白黒に変えたりなど様々な効果を編集することが出来る。\r\n◯ぼかしツール\r\n・ぼかしツールを使って、画像を合成しながらミニチュア画像風にすることが出来る。まずは選択ツールで画像を範囲指定する。その後詳細設定でエッジの調節をする。ぼやけた部分を作る為にはその下にあるぼかしを+すると良い。それを確定すると境界線部分にぼかしが表示され、ミニチュア風になる。\r\n◯クイック選択ツール\r\n・このツールを使うと、綺麗に画像を切り抜くことが出来る。\r\n','特になし','特になし','記述時、項目なし','https://www.udemy.com/course/web-design-master/','・上記の続き','2021-05-03 10:59:30.460821','2021-05-03 10:59:30.460821'),(33,'2021-01-11',2,0,'・Udemyレッスン','◯テキストツール\r\n・テキストツールで文字を入力することが出来る。文字の大きさやフォントなども指定出来る。文字の一部分のみ違う指定をしたい場合は、その部分を選択してからするとその部分のみ反映される。\r\n・テキストボックスを大きく範囲指定すると、自動で文字が改行される。長文を書く時には予め、大きく範囲を指定しておくと良い。\r\n・文字を変形させるには、ワープ機能を使用する。フォントを指定しやりたいワープボタンを選択すると反映される。ワープの角度も自由に選択出来る。\r\n◯その他\r\n・今まで習ったことをもとに様々なツールを使って、画像編集を行う。\r\n','特になし','特になし','記述時、項目なし','https://www.udemy.com/course/web-design-master/','・続き','2021-05-03 11:02:02.616595','2021-05-03 11:02:02.616595'),(34,'2021-01-13',5,30,'・Udemyレッスン','◯シェイプツール\r\n・このツールは自分で描画することが出来る。例えば長方形ツールを使うとボタンのようなものを作成出来る。その上にテキストや画像を挿入すると、より本格的なデザインが完成する。\r\n◯選択した部分のみの画像保存方法\r\n・スライス機能を使い、それぞれ範囲指定するとその部分のみ書き出して保存することが出来る。\r\n◯レイヤースタイルの順番\r\n・色んな画像を使って編集する際は、画像を重ねる順番を気にする必要がある。その違いによって、画像の表示が変わる。\r\n◯ドロップシャドウ\r\n・画像や文字に影をつけたり、浮き出たような効果をつけることが出来る。\r\n◯クリッピングマスク機能\r\n・この機能は画像の一部分のみに画像を取り入れることが出来る。レイヤー部分を選択しマウスで左クリックするとクリッピングボタンが出てくる。それを選択すると、上記のことが出来る。\r\n◯画像を切り抜く。\r\n・切り抜きツールを選択し、サイズをツールバーで指定する。\r\n◯クイック選択ツールで画像の範囲指定した場合、細かい部分は指定出来ない。その際は左下のツールバーにあるマスクモードにするとより分かりやすい。その機能のまま消しゴムツールを選択し、１px単位で消すと細かい部分も範囲指定することが出来る。\r\n◯自動選択ツール\r\n・白色のみ範囲指定しない場合は、許容値を２にすると良い。この値を大きくすると似たような色（薄い色）は選択されない。\r\n','特になし','特になし','・様々な機能を使って合成画像や効果を指定することが出来る。一つひとつの選択でデザイン部分に大きく差をつけることが分かった。フォトショップの操作に慣れ始め、画像を見てどのような編集をすれば良いのかを予想出来るようになってきた。\r\n','https://www.udemy.com/course/web-design-master/','・続き','2021-05-03 11:03:48.556638','2021-05-03 11:03:48.556638'),(35,'2021-01-14',2,30,'・Udemyレッスン','◯画像の付け足し\r\n・背景画像が白でその大きさを拡大したい時は、長方形選択ツールで元の白い部分を少し選択しそこから自由変形ツールで大きさを調節する。確定することで元の画像を大きくすることが出来る。\r\n・しかし上記のやり方はシェイプツールや無地の背景画像のみに適用される。写真を上記のやり方で拡大すると、変な画像の表示にかわる。\r\n\r\n◯人の髪の毛を繊細に切り取る\r\n・クイック選択ツールで様々な画像や写真を好きに範囲指定することが出来る。しかしこのツールでは髪の毛は繊細に表示されない。髪の毛一本一本が見えるように選択するにはクイック選択ツールで大まかに選択後、エッジをスマート半径にし2pxに設定する。またその画面上の左部分に境界線線調整ブラシツールがあり、それを髪の毛部分にドラックすると詳細に選択することが出来る。\r\n\r\n◯自動選択ツール\r\n・貼り付けたい同じ画像（背景の模様）を一気に選択出来るツールのこと。許容値を小さくすると、白い背景以外の画像を選択出来る。\r\n\r\n◯レイヤーの概念\r\n・下から上という順番で画像が構成されている。画像の順番の違いで画像の見た目も変わってくる為、その都度確認しながら進めていく必要がある。\r\n・レイヤーがたくさんある時は見やすくする為に、フォルダごとにまとめるようにする。\r\n・完成したレイヤーはロックをかけることが出来る。\r\n・レイヤーにカラーラベルをつける。ラベルをつけることでレイヤーの数が多くなっても分かりやすくなり、探しているレイヤーが見つけやすくなる。\r\n・レイヤーを選択するには、直接そのレイヤーをクリックする方法がある。それ以外に⌘を押しながら自動選択される機能がある。自動選択機能のチェックを外すとその後から⌘を押しながらクリックした画像がレイヤーとして選択出来る。\r\n\r\n◯レイヤーの不透明度について\r\n・選択したレイヤーを不透明にするには、スライドを動かして調節する。画像やテキストは塗りと不透明度ボタンどちらでも同じ効果を反映出来る。しかしシェイプツールでつくった場合は、塗りで調整すると中の部分のみに透明度が反映されるようになっている。（ベクトルオブジェクトという）\r\n','特になし','特になし','　以前習った操作方法に対して、より効率よく操作する方法を多く学んだ。編集するスピードが早く感じた。ショートカットキーも忘れずに、使いこなしてより効率よく編集出来るようにしていきたいと思った。','https://www.udemy.com/course/web-design-master/','・続き','2021-05-03 11:10:51.316097','2021-05-03 11:10:51.316097'),(36,'2021-02-07',6,0,'・Udemyコース','・レイヤーにドロップシャドウをかけるには、レイヤー効果のダイアログボックスにあるドロップシャドウを選択する。ドロップシャドウとは文字や画像に影をつけることが出来る。また影の方向は太陽が当たっているような感覚で作成すると作業しやすい。またその設定をする際に”包括光源を使用”というチェックボックスがあるが、それにチェックを入れると全ての画像や文字が同じ影になることを意味する。全てに適用したくない場合は、チェックを外すように気を付ける。影の詳細設定では距離は影の長さのこと、スプレッドは影の強さのこと、サイズはぼかしのような機能をもつ。\r\n\r\n・光彩とは文字が輝いているかのような印象に見せることが出来る効果である。レイヤー効果から光彩を選択し、詳細設定をする。画像上の全ての文字に同じレイヤー効果を使用したい場合は、レイヤー効果のコピーをして適用したいレイヤーにペーストする。\r\n\r\n・背景画像の質感をかえるには、レイヤー効果のパターンオーバーレイボタンから好きなパターンを選択することで適用される。不透明度を使い調節することで違和感なく質感を出すことが出来る。パターンオーバーレイはパターンがなければ、使用することが出来ない。パターンはインターネットでダウンロードすることも出来る。用途に合わせて入れていく。\r\n\r\n・オリジナルのパターンを作成するには、上にある編集ボタンの中にあるパターンを定義するを選択すると保存することが出来る。その前に⌘Aで範囲指定することを忘れないようにする。\r\n\r\n・見出しを段々と透明にするグラデーションの方法は、シェイプツールボタンの詳細部分で設定することが出来る。始めと終わりのカラーを設定し、透明にしたい部分のカラーを０にすると適用される。\r\n\r\n・ブラシツールを使って自由に絵をかく。（クレヨン風の文字をかく）\r\n予めテキストツールで打った文字にブラシ ツールでクレヨンを選択し、色を指定した後に上書きしていく。全て上書き出来たら元のテキストツールは削除するかまたは見えないようにする。\r\n\r\n・ペンツールを使って自由に線をかくには、角に沿ってボタンをつけて線をつなげていく。始めと終わりの点は必ずつなげるようにする。（シェイプツールの場合）パス選択ツールを選択すると、円形のような形にも対応することが出来る。\r\n\r\n・ブラシ ツールを使ってスタンプのように見せられる。ネットから形をダウンロードすることも出来る。\r\n\r\n・テキストツールを使い、長文を表示する場合は段落・文字ウィンドウで詳細設定をすることでよりみやすい文字になる。\r\n\r\n','特になし','特になし','・今まで学習してきたことを基礎としていることが多く、一度理解出来ると応用がきく。しかし微妙な影や光彩などの効果について見よう見真似の為、自分でもみやすい表示の仕方に気付けるようになりたいと思う。','https://www.udemy.com/course/web-design-master/','・続き','2021-05-03 11:12:54.448534','2021-05-03 11:12:54.448534'),(37,'2021-02-08',0,30,'・Udemyコース','・テキストツールを使って、旗の中に文字を入れたようなデザインにする。テキストツールを選択した状態で上部にあるワープテキストを押す。詳細のボックスが表示され、そこをマイナスやプラスにして確認しながら数値をかえる。設定したワープテキストを解除したい場合は、もう一度ワープテキストボタンを押して、なしを選択すると文字だけのテキストツールに戻すことが出来る。\r\n','特になし','特になし','・旗のようなワープテキストを使用する場合は、少しずつ数値を動かして様子を見ながら行う方がよいと思った。','https://www.udemy.com/course/web-design-master/','・続き','2021-05-03 11:14:50.213296','2021-05-03 11:14:50.213296'),(38,'2021-02-11',8,0,'・Udemyコース','◯テキストツール\r\n・文字にワープをかけたい場合は、テキストツールの中にあるワープテキストを使用する。\r\n（円弧）カーブの数値を変えることで、指定したい範囲に合わせることが出来る。テキストを打ち終わった後にテキストボックスのサイズを変更したい場合は、レイヤーを選択した状態で⌘ボタンを長押しするとバウンティングボックスが表示される。そこで大きさを変更出来て、カーブをよりかけることが出来る。\r\n\r\n・テキストツールで打った文字を指定した範囲に合わせて斜めに配置したい場合は、編集から遠近法ワープを選択する。初めは大まかに範囲指定後、上部にあるレイアウトからワープボタンに変える。その状態でバウンティングボックスを指定したい範囲に合わせることで、斜めに見えるように配置させることが出来る。\r\n\r\n◯マスク\r\n・（レイヤー）\r\n　画像を円形に切り抜いたような編集をするには、楕円形選択ツールを使用して予め範囲を指定する。その状態でレイヤー表示の下にあるレイヤーマスクを追加するボタンを押すと、範囲指定した部分のみ適用される。\r\n・（グラデーション）\r\n　レイヤーを選択した状態でレイヤーマスクを追加する。新規のレイヤーマスクを選択していることを確認の上、ウィンドウからチャンネルを引き出す。そこから一番下にある目のボックスにチェックを入れる。チェックをいれるとレイヤーマスクがかかっている部分が赤くなる。その状態でグラデーションツールを選択し、グラデーションエディターからどのようなグラデーションにするのかを選ぶ。画面のボタンが変わったらグラデーションをかけたい部分をなぞり表示させる。指定したい範囲が選択できたら、先ほどつけた赤いチェックを外すことで、本来のグラデーションが表示される。\r\n・（クイック）\r\n　クイック選択ツールを選択して、範囲指定する。選択した状態でレイヤーマスクを追加すると指定した部分のみ表示させることが出来る。\r\n\r\n・（クリッピングマスク）\r\n　指定した形の中に画像を入れる。長方形選択ツールを選択し、入れたい画像のサイズをつくる。次にファイルボタンから画像の埋め込みを配置を選択し、ファイルから入れたい画像を挿入する。挿入した状態で入れたいサイズに変更し、クリッピングマスク作成を選択すると長方形選択ツールの上に表示されるようになる。\r\n\r\n◯色調補正\r\n・（レベル補正）\r\n　色調補正ボタンを選択し、数値を其々変えることで画像の彩度などを変えて表示することが出来る。\r\n・（フィルター）\r\n　レイヤーを指定後にフィルターからフィルターギャラリーを選択し、様々な画像効果をかえることが出来る。それを重ねることで色んな効果をつくるいことが出来る。重ねたい場合は、レイヤー部分の選択でスクリーンや乗算をする。\r\n','特になし','◯苦戦したこと\r\n　ワープテキストを使用する際にどうしても見本と同じような大きくワープのかかった文字を表示させることが出来なかった。ネットで調べたり、何度もやり直したりする中でテキストボックスそもそもの大きさなのではないかと考えた。テキストボックスを表示させる時に大きく範囲を作っていた為、それを小さくしてみると上手くいくことが分かった。その状態でワープをかけることで、やりたい文字を表示させることが出来た。\r\n','苦戦した部分が多かったように思うが、一つひとつ丁寧に行うことで見本と同じものをつくることが出来た。自分の中で苦手な分野はテキストツールをワープすることだ。数をこなしていくことで、習得していきたい。','https://www.udemy.com/course/web-design-master/','・続き','2021-05-03 11:16:36.730599','2021-05-03 11:16:36.730599'),(39,'2021-02-13',4,0,'・Udemyコース','◯色調補正とレタッチ\r\n（HDRトーン）\r\n　自動で画像にイメージ加工をする時は上部の色調補正からHDRトーンを選択する。選択するとダイアログボックスが出てきて、トーンやエッジなどの効果を変えることが出来る。同じトーンでも色んな効果が出来る機能を持っている。\r\n\r\n（シェイプツール）\r\n　例えば写真の人物の瞳がぼやけていたり、ぱっとしない印象の場合に加工が出来る機能がある。シェイプツールを選択し、目を加工する時はブラシのサイズを小さくしてから行う。同じ場所を何重にも重ねてなぞることで、違和感なく加工出来る。しかしやりすぎてしまうと変な色が出てきてしまう為、気を付ける必要がある。\r\n\r\n（肌を綺麗に見せる・・・ニキビやしわを消す）\r\n　しわを消すにはスポット修正ブラシを使用する。ブラシを小さくしてしわの部分を少しずつなぞる。あまりなぞりすぎると不自然に見える為、様子を見ながら行う。\r\n　肌をぼかすにはぼかしツールを使用する。サイズは上記より少し大きめにして何重にも重ねる。白くなりすぎないようにする。\r\n　ハイライトを入れるには、覆い焼きツールを使用する。大きいブラシを使用して目の下や鼻筋などに入れると肌が綺麗になり、上記の加工もより違和感なく見える。\r\n','特になし','特になし','　とても小さな変化の為、慎重に加工する必要があると感じた。また顔の加工は人の印象を簡単に変えることが出来る為、より慎重に行っていきたい。','https://www.udemy.com/course/web-design-master/','・続き','2021-05-03 11:18:36.692968','2021-05-03 11:18:36.692968'),(40,'2021-02-22',4,0,'・Udemyコース','◯背景画像を大きくする\r\n　元のある画像から背景画像を大きくする場合は、上部ボタンのイメージからカンパスサイズを選択し、数値を入力する。そうすることでサイズを大きくするだけでなく、小さくすることも出来る。\r\n\r\n◯挿入した画像の色をそのままサイズを大きくし、伸ばす。\r\n　指定したい画像の色部分を長方形選択ツールを使用し、選択する。そのまま自由変形を行い、範囲を広げる。\r\n\r\n◯WEBデザインには黄金比・白銀比という比率がある。それを使用することで、みやすいデザインになる。\r\n','特になし','特になし','以前にも勉強したカンパスサイズの変更は忘れていた。基本的に必要なやり方なので、今後は忘れないようにしていきたい。デザインの黄金比は少し理解するのが難しい。少しずつ色んなサイトを見て、学んでいきたい。','https://www.udemy.com/course/web-design-master/','・続き','2021-05-03 11:21:19.055818','2021-05-03 11:21:19.055818'),(43,'2021-05-17',2,0,'モデル名の変更','★ネットにあるサイトを参考にしながら、進める。\r\n◯コマンドでdocker-compose run web rails g migration change_posts_to_study_records と記述。\r\n・モデルのcreate_rb下に新しいchangeファイルが追加された。\r\nそのファイル内に、\r\n def change\r\n    rename_table :posts, :study_records\r\n  end\r\nとして保存する。\r\n\r\n◯モデルの名前を変更\r\n・まずファイル名の変更　post.rbからstudy_record.rbに修正\r\nそのファイル内、\r\nclass Post < ApplicationRecord　から　class StudyRecord < ApplicationRecordと修正\r\n※サイト記載のあるアソシエーションは検索しても、vsコードになかった為省略している。\r\n\r\n◯ビューの修正\r\n・フォルダの名前をposts　から　study_records　に変更\r\n\r\n◯上記全て変更・修正したら、docker-compose run web rails db:migrateとコマンドで打つ。\r\n\r\n↓エラーが出なかった為、続行。\r\n\r\n◯ルートを修正する\r\n・get posts/◯◯ => posts#◯◯　というようにpostsがついている部分を全てstudy_recordsに修正。\r\n\r\n◯テストコードの修正\r\n・このrbファイルが見当たらなかった為、省略している。\r\n\r\n※2つの工程を省略した為、動作確認をする。（データベースがstuhdy_recordsテーブルに変更になり、データが保存されているかを確認した）\r\n\r\nテーブル名は変更になっていて、成功している。しかし、全てのリンク先やurl指定先がpostsではなくなった為、全て変更する作業が発生。\r\n全て変更後に定数が定義されていないとエラーが出る。\r\n（解決）\r\n　・参考サイトにはなかったcssのpostファイルが変更になっていない為、そのようなエラーが出た。ファイル名をstudy_recordに変更するとエラーが解消された。\r\n\r\n\r\n\r\n','特になし','修正するコードを探す際に時間を要した。またその際にスペルミスをしてしまい、大幅な時間ロスがあった。','プロゲートで学習した内容に沿って、postテーブルを作成した。今後はテーブル名をつける際は考えてつけるようにしていきたい。\r\n','参考サイト：https://qiita.com/mtoyopet/items/a8558c9b7010dde6ecf8　','◯@postの変数をstudyに変更する。\r\n◯urlパスを修正。','2021-05-17 17:26:39.647878','2021-05-17 17:26:39.647878'),(44,'2021-05-20',1,0,'・学習一覧ページの修正　・新規サイトの立ち上げ','◯学習一覧ページの修正\r\n・以前から5月のページを開くと、4月後半の日付も一緒に表示されていた。原因を追求する為、コードを確認した。結果記述ミスだった。月初めは表示するbeginning_of_monthでなければならない部分に、monthをweekと勘違いして入っていた。そこを修正すると、解決することが出来た。\r\n\r\n・デザインの修正は、marginを使って指定することでキレイに並べることが出来た。\r\n\r\n◯学習記録ページ\r\n・記録ページを表示する際に長い文章の場合、下の項目に文字が被っていた。それを改善しようと思い、ネットで調べる。画面表示サイズに合わせて枠を調節する場合は、heightをautoにする必要があると記載があった。それを元にコードを確認すると、コード上では全てpx指定していた。それをautoに変更すると、内容量ごとに枠の大きさが調節され解決することが出来た。\r\n\r\n','特になし','週ごとのチェック記載になっていたことに気づくまで、時間を要した。','1つのミスで表示内容が変わってしまう為、気をつけていきたいと思う。','特になし','◯新規サイトの立ち上げ','2021-05-20 12:40:39.885279','2021-05-20 12:40:39.885279'),(45,'2021-05-21',5,30,'・新しいサイトの環境構築設定','◯環境構築\r\n・今まで開発してきたサイトのファイルを基本として、環境構築を進めた。その中で多くのエラーが発生。順番に解決して最後には開発環境を構築することが出来た。\r\n\r\n・child-systemというディレクトリを作成。その中にDockerfile,Gemfile,dokcer-compose.yml,Gemfile.lock,entrypoint.shの5つのファイルを作る。\r\n其々、以前作成したportforioのファイルをコピーし、保存。\r\n\r\n・docker-compose build　コマンドで打つ。ruby on railsのファイルが多く作成される。\r\n\r\n・docker-compose up　コマンドをうち、立ち上げる。しかし立ち上がらない。立ち上がったような文字が表示されたが、何故かportforioのdb,webが立ち上がる。\r\nファイルの名前が階層を確認したが、child-systemであっていた。\r\nコピーしたdocker-compose.ymlを確認してみると、container_nameのweb,dbがportforioになっていた。其々child-system-web,child-system-dbに変更する。その後upすると起動した。\r\n\r\n・docker-compose run web rake db:create　をコマンドで実行するとエラーが発生。エラー内容は、passwordとrootが間違っていた為。\r\n\r\n・docker-compose run web rails s　コマンドを実行し、サーバーを立ち上げる。\r\nサーバーが立ち上がったが、rdebug-ideコマンドがないとエラーが出る。\r\n以前のデバッカーが入っていないと、注意されていることがわかる。しかしそれをどう解決したら良いかわからない。ネットでも調べたがわからない。\r\n助言をもらい、まずはサーバーが立ち上がっているかを確認することを始める。デバッカーを記すdocker-compose.ymlの\r\ncommand: bundle exec rdebug-ide --host 0.0.0.0 --port 1234 --dispatcher-port 26162 -- bin/rails server -p 3000 -b 0.0.0.0\r\n上記から下記に修正\r\ncommand: bash -c \"rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b \'0.0.0.0\'\"\r\nに変更して、dokcercompose buildし、docker-compose upをすると、ruby on railsの初期画面が表示された。\r\n\r\n・デバッカーを入れる。\r\nGemfileに\r\ngem \'ruby-debug-ide\'\r\ngem \'debase\'\r\nと入れ、保存。\r\nbundle installをコマンドで実行。しかしbundleコマンドが実行できないと表示される。bundleをインストールしたり、sudoをインストールしたが変化なし。\r\n自分で解決出来ない為、助言をもらう。\r\nコンテナに対して実行していない為、出来ないとアドバイスもらい自分でやってみる。\r\n今まではbundle install\r\n改善後、docker-compose run web bundle installと実行すると、成功する。\r\nまた、\r\nlaunch.jsonファイルを作成し、その中に\r\n{\r\n    // Use IntelliSense to learn about possible attributes.\r\n    // Hover to view descriptions of existing attributes.\r\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\r\n    \"version\": \"0.2.0\",\r\n    \"configurations\": [\r\n        {\r\n            \"name\": \"Local Listen for rdebug-ide\",\r\n            \"type\": \"Ruby\",\r\n            \"request\": \"attach\",\r\n            \"remoteHost\": \"127.0.0.1\",\r\n            \"remotePort\": \"1234\",\r\n            \"remoteWorkspaceRoot\": \"${workspaceRoot}\"\r\n        }\r\n    ]\r\n}\r\nを保存する。その状態でdocker-compose upする。ブラウザをリロードするが、変化なし。\r\n\r\n・vsコードの虫マークをクリックし、listen for rdebug-ideを選択し、三角ボタンを押すと下線のラインがオレンジに変化しブラウザにraileの初期画面が表示された。\r\n\r\n\r\n◯コマンドについて\r\n・docker ps　と打つことで、コンテナが立ち上がっているかを知ることが出来る。\r\n\r\n・docker exec -it child-system-web /bin/bash　と打つと、\r\nroot@a3983dbd6556:/myapp# misa@DESKTOP-5RUPF8R:~/misa/Documents/child-system$と変換される。\r\nコンテナを作成して起動からログインしてbashで操作（フォアグラウンドで実行）\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n','・コマンドについて理解が浅い。簡単なlsやll,pwdなどのコマンド名は覚えたが、長くなるとわからない。パスを記述出来ることはわかってきたが、どのように打つかは理解に欠ける。\r\n・Dockerfile,Gemfileなどの環境構築ファイルの中身の理解が乏しい。前回よりかは理解が深まった。','・bundle installが出来ない時に時間を要した。どこで実行したいのかを考えると、自分でも解決出来たことかもしれない。','・以前よりかはdocker-compose.ymlやDockerfile内の記述内容を理解出来た。またエラー内容も理解して、自己解決出来るようになってきたと思う。しかしもっと深く読み込まないとまた環境構築する際には、止まってしまうと思う。','一部参考サイト\r\n・https://qiita.com/chisaki0606/items/a4b42af5c4735c94057a\r\n・https://qiita.com/imaichel/items/b45ab6f9e560eb3d13f4','・トップページの作成（新システム）\r\n・portforioページの微調整（デザイン）','2021-05-21 16:03:08.749063','2021-05-21 16:03:08.749063'),(72,'2021-05-26',3,30,'一日ごとの記録下に前・次ページリンクを作成','◯リンクを作成\r\nhttps://www.for-engineer.life/entry/get-record/の記事を参考に、進める。\r\n（モデル内）\r\ndef previous\r\n　StudyRecord.where(\"id < ?\", self.id).order(\"id DESC\").first\r\nend\r\ndef next\r\n　StudyRecord.where(\"id > ?\", self.id).order(\"id ASC\").first\r\nend\r\nend\r\n\r\nと記述する。\r\n\r\n（コントローラ内）\r\n  def show\r\n    @post = StudyRecord.find_by(id: params[:id])\r\n  end\r\n\r\n（ビュー内）\r\n<% if @post.previous.present? %>\r\n　<%= link_to \"前ページ\", article_path(@post.previous)　%>\r\n<% end %>\r\n<% if @post.next.present? %>\r\n　<%= link_to \"次ページ\",article_path(@post.next) %>\r\n<% end %>\r\n\r\n上記のコードを各記述していく。\r\n\r\n更新すると、エラーは発生しない。\r\nしかしボタンを押すと、ページは違う所に飛ぶが次の日になっていない。\r\nurlのidを見てみると、データベースに保存された順番の通りに表示されている。\r\nコードを見た所、idを元にして前・次を判定している。\r\n学習記録日を元に、リンクを作成したい。\r\n\r\n◯リンク先にshowのprefixパスを指定したい。しかしコマンドで\r\ndocker-compose run web rails routes\r\nでurlやprefixを調べるも、showのprefixは存在しない。調べるとidがついているものは表示されないことを知る。\r\n（解決）\r\nhttps://techtechmedia.com/routing-customize-rails/\r\nのサイトを参考にして、変更する。\r\n自分のroutes内のshowを修正。\r\n  get \"study_records/:id\" , to: \'study_records#show\' , as: \'show\'\r\nとすることで、もう一度コマンドでroutesを確認するとshowと記載されるようになった。\r\ngetはurl,toはアクション,asはprefix名と理解した。\r\nそのshowを使って、リンク先のパスをshow_pathとすることでprefixパスとして利用出来ることがわかった。\r\n\r\n','self.idが自分のidになるということが少し理解に乏しい。ここを変えたらどうなるのかなと思う。\r\nビュー内に記述したコードの内容が難しい。学習したことの内記述方法。またpresent?と書く記述方法を調べていきたい。','idで表示されることはわかったが、dateを使って判定する方法が分からなく、試行錯誤した。','記述したことのないコードを打ちながら、自分のモデル名やコントローラ内で使えたことは嬉しく思う。１つ１つのコード内容を理解して、次回に活かしていけたらと思う。','参考記事：\r\nhttps://techtechmedia.com/routing-customize-rails/\r\nhttps://www.for-engineer.life/entry/get-record/','日付ごとに前・次ページへリンクをつけられるようにする。','2021-05-27 16:44:50.184661','2021-05-27 17:37:26.966825'),(73,'2021-05-27',5,0,'（前回の続き）前・次ページリンクを作成','前回はidでのリンクを作成することは出来たが、日付がバラバラだった。\r\n◯日付ごとにリンクをつけたい。（試したこと）\r\n・コントローラに追記で、\r\n @page = StudyRecord.find(date:params[:date])\r\n\r\n・モデル内に\r\n    def previous\r\n        StudyRecord.where(\"date < ?\",self.date).order(\"date DESC\").first\r\n    end\r\n    def next\r\n        StudyRecord.where(\"date > ?\",selfdate).order(\"date ASC\").first\r\n    end\r\n\r\n・ビュー内\r\n    <% if @page.previous.present? %>\r\n    <%= link_to \"前ページ\", show_path(@page.previous) %>\r\n    <% end %>\r\n    <% if @page.next.present? %>\r\n    <%= link_to \"次ページ\", show_path(@page.next) %>\r\n    <% end %>\r\n\r\n上記で更新するも、エラーが発生。\r\npreviousが定義されていないと出る。dateでは判定できないのかと思い、下記の試す。\r\n\r\n\r\n・コントローラ\r\n @post = StudyRecord.find_by(id: params[:id])\r\n @page = StudyRecord.find_by(date: params[:date])\r\n\r\n・モデルは上記と同様\r\n\r\n・ビュー内\r\nif文を@postにして、リンクタグ内に@pageと変数を記述する。\r\nしかし上記の内容でもエラーが発生。ビュー内の記述にエラーが出る。\r\n\r\nまた下記も試す\r\n・コントローラ内にmonthsアクションと同じコードを記述して、日付のデータを扱おうとしたが途中で違うと思い断念。\r\n・railsのmusql内で日付ごとにレコードを並び替えることが出来るかもしれないと思い、検索。\r\nしかしcreate_atやidでしか操作できないようだ。そのため、候補から外れる。\r\n\r\n（解決した方法）\r\n\r\n・コントローラ\r\n  def show\r\n    @post = StudyRecord.find_by(id: params[:id])\r\n  end\r\n\r\n・モデル\r\n    def previous\r\n        StudyRecord.where(\"date < ?\",date).order(\"date DESC\").first\r\n    end\r\n    def next\r\n        StudyRecord.where(\"date > ?\",date).order(\"date ASC\").first\r\n    end\r\n\r\n・ビュー内\r\n    <% if @post.previous.present? %>\r\n    <%= link_to \"前ページ\", show_path(@post.previous) %>\r\n    <% end %>\r\n    <% if @post.next.present? %>\r\n    <%= link_to \"次ページ\", show_path(@post.next) %>\r\n    <% end %>\r\n\r\n◯present?メソッドの理解を深める\r\nRailsにおいてpresentメソッドはオブジェクトであるレシーバーの値が存在すればtrue、存在しなければfalseを返すメソッドとなる。if文など条件分岐をプログラムで書くときによく使われるメソッド。\r\n\r\npresentメソッドは\r\n\r\n変数.present?\r\n \r\n\r\n?を最後につけることを忘れないように。\r\n\r\n◯whereメソッドについて\r\n指定した内容と一致するデータを配列として取り出すことが出来るメソッドのこと。\r\n\r\n','特になし','dateの扱いかたが分からず、苦戦した。idで取得し、取得したデータdateを元に判定することでリンク先を指定することが出来ると知った。\r\n一つ一つのコードを理解したり、自分で考えながら行うことで早期解決することが出来ると感じた。','知らないメソッドを使ってコードを書くのは、難しい。一から理解を深めれば解決することが出来た為、めげずに今後も取り組んでいきたい。\r\n','参考サイト：\r\nhttps://techacademy.jp/magazine/20214\r\nhttps://www.for-engineer.life/entry/get-record/\r\nhttps://pikawaka.com/rails/where','最近作成した新規サイトのトップページを作成する','2021-05-27 17:22:06.591734','2021-05-27 17:22:06.591734'),(74,'2020-10-19',2,0,'HTML・CSS','HTML\r\n・見出しと段落\r\n・ヘッダーとフッター\r\n・リンク\r\n・画像\r\nCSS\r\n・余白\r\n・リストの点の消し方\r\n・色\r\n・指定した色だけ反映させる\r\n・フォントサイズ\r\n\r\n\r\n(理解したこと)\r\n\r\n・h１の後にh２をつける\r\n・ヘッダーとフッターにわかれていて、そこから色や文字の大きさを指定する。\r\n・リンクタグを使用して、入力する\r\n・画像はimgを使用する\r\n\r\n・padding を使う\r\n・noneを入れる\r\n・color\r\n・spanを使って指定\r\n・font-size ','なし','なし','入力欄なし','https://prog-8.com/lessons/html/study/1','続き','2022-02-05 11:19:47.431200','2022-02-05 11:22:45.914190'),(75,'2020-10-20',0,30,'CSS','・コンテンツ\r\n・枠の余白　\r\n・問い合わせ\r\n・ボーダー\r\n\r\n（理解したこと）\r\n・枠組みのたてかた\r\n・paddingとmarginで余白を作成\r\n・<h>と<p>で作成\r\n・下線の引き方。全部分から一部分まで','なし','なし','入力欄なし','https://prog-8.com/html/study/1/22#/68','JS','2022-02-05 11:22:22.358030','2022-02-05 11:33:15.736476'),(76,'2020-10-21',1,0,'HTML・JS','HTML\r\n・header hootter のタグ\r\n・問い合わせフォーム　違うパターン\r\nJS\r\n・コンソールへの出力方法\r\n・文字列と値の違い\r\n・足し算・引き算・かけ算・割り算・余り\r\n・変数\r\n\r\n（理解したいること）\r\n\r\n・<div class=header>ではなく、<header>で記述する\r\n・ボーダーを使って、枠を作る\r\n\r\n・console.log(     );で出力する\r\n・（”）の有無で表示され方が違う\r\n・（　＋　ー　＊　/　％　）を使う\r\n・letを使用して変数をつくる','・変数を入力する時にletまたはconsole.logのどちらを入れるか迷う','入力欄なし','入力欄なし','https://prog-8.com/dashboard','変数と定数','2022-02-05 11:26:43.011123','2022-02-05 11:30:32.489836'),(77,'2021-10-22',0,22,'変数と定数','・コンテンツ\r\n・枠の余白　\r\n・問い合わせ\r\n・ボーダー\r\n\r\n（理解したこと）\r\nletとconsteの違い　consteは変更できない\r\n（ ＜　＞　＞＝　＜＝　）を使用する\r\ntrue   false  の出力方法','なし','なし','入力欄なし','https://prog-8.com/html/study/1/22#/68','HTML・JS','2022-02-05 11:28:57.689701','2022-02-05 11:28:57.689701'),(78,'2020-10-22',0,40,'変数と定数','変数と定数の使い分け\r\nIF文\r\n\r\n（理解したこと）\r\nletとconsteの違い　consteは変更できない\r\n（ ＜　＞　＞＝　＜＝　）を使用する\r\ntrue   false  の出力方法','IF文が難しい。','なし','入力欄なし','https://prog-8.com/es6/study/1/15#/40','IF文','2022-02-05 11:34:41.781983','2022-02-05 11:34:41.781983'),(79,'2020-10-23',0,20,'IF文','IF文　\r\n・swichについて\r\n・＆＆　｜｜\r\n・break　の重要さ\r\n・default　出力仕方\r\n・case を出力する時の方法\r\n\r\n（理解したこと）\r\n・swichを使うことで見やすくなる。\r\n・＆＆（◯◯かつ）、｜｜（◯◯または）と意味する\r\n・breakを入れないと、全てのcaseが実行されてしまう\r\n・case(値）と入れその後、console.logを出力する','前日よりからはIF文を理解することが出来た。swichを使う方法をより理解する必要があると感じた。','なし','入力欄なし','https://prog-8.com/es6/study/1/19#','文法','2022-02-05 11:36:07.698271','2022-02-05 11:36:07.698271'),(80,'2020-10-25',1,0,'文法','for文\r\nwhile文\r\n配列\r\n\r\n（理解したこと）\r\n・fo文の中でif文を使った\r\n・繰り返す方法\r\n・配列を初期化する時に；と、を使う','全て理解が浅い','なし','入力欄なし','https://prog-8.com/es6/study/2/8#','配列','2022-02-05 11:37:27.776162','2022-02-05 11:37:27.776162'),(81,'2020-10-26',0,30,'読書','ITパスポートの参考書を読んだ\r\n\r\n（理解したこと）\r\n・ITとは\r\n・演算装置、制御装置などの仕組み','テスト形式のページがあり、挑戦したが分からない部分があった。','なし','入力欄なし','電子書籍','文法','2022-02-05 11:38:45.927870','2022-02-05 11:38:45.927870'),(82,'2020-10-27',1,0,'文法','配列と繰り返し\r\nオブジェクト\r\nundefindについて\r\n\r\n（理解したこと）\r\n・for文の条件の中でlengthを使って、配列の要素数の分だけ繰り返す\r\n・プロパティ：値で定義する\r\n・定義されていない変数を利用した時にundefindとなる','１０月２５日の内容は理解出来た。','なし','入力欄なし','https://prog-8.com/es6/study/2/16#/34','JS','2022-02-05 11:39:55.955341','2022-02-05 11:39:55.955341'),(83,'2020-10-30',3,30,'JS・Command Line','（js）オブジェクトに配列を入れる\r\n関数\r\n引数\r\n戻り値\r\n最大値\r\n（command  line ) ファイルを作成\r\nファイルの中身をみる\r\nディレクトリを作成する\r\nディレクトリの移動\r\nファイルディレクトリの移動・名前変更\r\nファイルを削除\r\n\r\n(理解したこと)\r\n・[  ]を使って入れる\r\n・function()を使って、その後にまとめたい処理を入れる\r\n・また（）>= と入力しても、同じ結果になる\r\n・定数名：（値）値は引数名に代入される\r\n・returnを使うと、呼び出し元に結果が入る\r\n・if文やreturnなど今まで習ったことを使い、最終的に最大値を求める\r\n（command line ) touch ファイル名　作成される\r\n・cat ファイル名　で中身を表示\r\n・mkdir ファイル名でディレクトリを作成\r\n・cd ファイル名で移動することが出来る\r\n・mv ファイル名　ファイル名で移動。名前変更は入力方法同じ。\r\n・rm を使ってファイル名を削除する','関数、引数、戻り値は理解した。しかしそれらが複数同じ場面で使用する時は、混乱し戸惑う。','なし','入力欄なし','https://prog-8.com/es6/study/3/9#/21','CSS','2022-02-05 11:41:37.500042','2022-02-05 11:41:37.500042'),(84,'2020-10-31',1,0,'CSS','(CSS)\r\nトップ部分のレイアウトを作る\r\n透明度と文字間隔\r\n\r\n\r\n（理解したこと）\r\n・背景画像を挿入する時はbackground-image:url(    )と入れ( )には画像のurlが入る\r\n・背景画像の大きさを指定する時はbackground-coverと入れると背景全体に画像が縮小・拡大する\r\n・要素を透過する→opacity:（◯．◯）と数字を入れるとその数値に応じて透明になる\r\n・letter-spacingプロパティを要すると文字間隔を指定出来る','なし','なし\r\n\r\n','入力欄なし','https://prog-8.com/html/study/2/4#','CSS','2022-02-05 11:42:50.601524','2022-02-05 11:42:50.601524'),(85,'2020-11-01',3,40,'CSS','ボタンを作る\r\nレイアウト\r\nアイコン\r\nヘッダーを作る\r\nレッスン一覧を作る\r\n\r\n(理解したこと)\r\n・<a>ではなく、大きなボタンを作る際はbtnを使う\r\n・クラスにhoverをつけると、カーソルが乗ったときに色が変化する\r\n・<span>にアイコンの表示出来るクラスを指定する\r\n・transitionを用いると、アイコンにアニメーションをつけることが出来る\r\n・position: absolute;を用いると、要素同士を重ねて表示出来る。','なし','なし\r\n','入力欄なし','https://prog-8.com/html/study/2/13#/37','HTML・JS・React','2022-02-05 11:44:31.078548','2022-02-05 11:44:31.078548'),(86,'2020-11-03',3,30,'HTML・JS・React','(HTML)\r\nボタンを作る\r\nヘッダーを固定する\r\n\r\n(JS)\r\nクラスについて\r\n継承について\r\n\r\n(React)\r\nリアクトを学ぼう\r\n\r\n（理解したこと）\r\n・立体的なボタンを作るには、box-shadowを使う。またクリック時にボタンが押された表示を出すには、box-shadow:noneでボタンの影を消す。\r\n・ヘッダーを固定するには、position:fixedを入れる。またz-indexを入れると要素の重なりを指定することが出来る。\r\n\r\n・設計図のことをclassと呼び、新しいクラスを作成するにはclass クラス名と入力すると表示される。\r\n・コンストラクタはクラスの{}内にconstracter() {} と記述する。\r\n・this.プロパティ:値とすることで、インスタンスにプロパティと値を追加することが出来る。\r\n・メソッド名：()とすることでメソッドを定義することが出来る。\r\n・継承を用いてクラスを作成するにはextendsを用いる。\r\n\r\n・JSを使う時は{  }で囲む。','リアクトのJSを利用して、記述していく所が難しい。','なし','入力欄なし','https://prog-8.com/html/study/2/18#/50\r\n\r\nhttps://prog-8.com/es6/study/4/14#/33\r\n\r\nhttps://prog-8.com/react/study/1/12#/36','リアクト','2022-02-05 11:46:06.492879','2022-02-05 11:46:06.492879'),(87,'2020-11-05',1,0,'リアクト','（リアクト）\r\n文字のカウント\r\n\r\n(JS)復習ワーク４\r\n\r\n(理解したこと)\r\n・countを入れボタンを押すと回数分が表示される\r\n\r\n・インスタントの仕方\r\n・コンストラクタの使い方','リアクトの内容が全て理解に欠ける。もう一度通して覚える必要がある。','なし','入力欄なし','https://prog-8.com/languages/es6https://prog-8.com/react/study/1/1#/0','リアクト','2022-02-05 11:47:20.470101','2022-02-05 11:47:20.470101'),(88,'2020-11-06',3,0,'リアクト','（リアクト）ワーク１復習\r\n\r\n','復習するが、stateに関する３ステップの内容理解が難しい。数回挑戦するが、理解し難い。','なし','入力欄なし','https://prog-8.com/lessons/react/study/1','リアクト','2022-02-05 11:48:39.695103','2022-02-05 11:48:39.695103'),(89,'2020-11-08',4,0,'RUby','（Ruby）\r\n出力\r\n\r\n変数\r\n\r\nIF文\r\n\r\n配列とハッシュ\r\nクラスとインスタンス\r\nメソット定義\r\n\r\n(理解したこと)\r\n・出力するには、puts 文字列または数値を入れるとコンソールに表示される。文字列はダブルクォーテーションを使う。\r\n・変数は　変数名　= 　値や文字列　を入れると、変数を作ることが出来る。\r\n・JSとほぼ変わらない入力方法でIF文を作る。（）や{} は使わない。\r\n・配列は[  ]、ハッシュは{  }で入力し、使い分ける。\r\n・新しいクラスを作成する時は、JSと同じように　クラス名.Newclassと入力する。\r\n・引数を渡す時はメソット名(  )で定義し、( )の中に引数を入れる。\r\n◯文の最後にはendを忘れないようにする。','endの入力を忘れがちだった。メソッドの定義については、理解が浅い為後日もう一度復習した方がよいと思った。','なし','入力欄なし','https://prog-8.com/ruby/study/4/10#/24','Ruby','2022-02-05 11:50:02.478402','2022-02-05 11:50:02.478402'),(90,'2020-11-09',0,30,'Ruby','Rubyの復習\r\n・クラス定義\r\n・メソッド\r\n・インスタンス変数\r\n\r\n(理解したこと)\r\n前日記載','前日より理解は深まった。しかしメソット内の定義内容は迷うことがある。','なし','入力欄なし','https://prog-8.com/ruby/study/4/10#/24','メソッド','2022-02-05 11:53:21.207984','2022-02-05 11:53:21.207984'),(91,'2020-11-10',1,25,'メソッド','・initialize メソッド\r\n・ファイルを分割する\r\n\r\n・入力をうける\r\n\r\n(理解したこと)\r\n・インスタンスを生成した直後に、呼び出せる。\r\n・idexからメニューのみ取り出し別のページに移動させる\r\n\r\n・get.chompで入力を受けることが出来る。また数値を受けるには、get.chomp.to_iと入れる。\r\n\r\n','変数が値として使用出来ることの理解が浅い。メソッドを呼び出す時はどのインスタンスから呼びだすか迷う部分が多かった。','なし','入力欄なし','https://prog-8.com/ruby/study/4/17#/42','インスタンスメソッド','2022-02-05 11:55:52.186378','2022-02-05 11:55:52.186378'),(92,'2020-11-11',0,45,'インスタンスメソッド','継承とは\r\n\r\nインスタンスメソッドの追加\r\n\r\n(理解したこと)\r\n・class　新しいクラス名　<　元のクラス名で元のクラスを継承することが出来る。\r\n・子クラスにも独自のメソッドを作ることが出来る','なし','なし','入力欄なし','https://prog-8.com/ruby/study/5/8#/15','クラスメソッド','2022-02-05 11:57:05.486731','2022-02-05 11:57:05.486731'),(93,'2020-11-13',0,45,'クラスメソッド','クラスメソッドの使い方\r\n\r\n(理解したこと)\r\nインスタンスメソッドはインスタンス名に対して呼び出しをする。クラスメソッドはクラスに対して呼び出す。少し違いがある。','なし','なし','入力欄なし','https://prog-8.com/ruby/study/5/15#/29','Ruby on Rails','2022-02-05 11:58:21.611589','2022-02-05 11:58:21.611589'),(94,'2020-11-14',4,0,'Ruby on Rails','Ruby5を復習する。\r\nRuby on rails　ビューについて\r\n\r\n(理解したこと)\r\n見た目を作るHTMLである\r\nコントローラの中にあるメソッドは「アクション」と呼ぶ。','なし','なし','入力欄なし','https://prog-8.com/rails5/study/1/9#/28','each文','2022-02-05 11:59:49.392773','2022-02-05 11:59:49.392773'),(95,'2020-11-15',1,0,'each文','投稿ページを作成する\r\n画像を表示する\r\n\r\n（理解したこと）\r\neach文を使用して、投稿ページの内容を入れる\r\nRubyを入れる時は＜％％＞の中に変数が入る。その中で変数を代入したり定義したりする。ブラウザに表示したい時は、＜％＝％＞と＝を忘れないようにする。\r\nimg src=urlと入力すると、表示される','なし','なし','入力欄なし','https://prog-8.com/rails5/study/2/7#/23','データベースの作成','2022-02-05 12:01:04.570714','2022-02-05 12:01:04.570714'),(96,'2020-11-16',1,0,'データベースの作成','データベースの作成\r\n\r\nモデル\r\nrails console\r\n\r\n投稿データを取り出す\r\n共通のレイアウトをまとめる。\r\nlink _toメソッド\r\n\r\n(理解したこと)\r\n・マイグレーションファイルと呼ばれる、データベースに変更を指示するためのファイルを作成し、rails g model Post content:textというコマンドで作成出来る。\r\n・継承したクラスをモデルと呼ぶ。\r\n・rails consoleと入力し、enterを押すと、コンソールが起動する。またquitでコンソールを閉じることが出来る。\r\n・post.allは全て、post.firstは最初の配列を取り出す。\r\n・<%= yield %>と入力すると、共通のレイアウトをまとめることが出来る。\r\n・第一引数に表示する文字を、第二引数に URLを書くことでリンクが作成出来る。','なし','なし','入力欄なし','https://prog-8.com/rails5/study/2/15#/47','rails','2022-02-05 12:02:20.098032','2022-02-05 12:02:20.098032'),(97,'2020-11-17',1,0,'rails','なし','なし','なし','入力欄なし','入力なし','読書','2022-02-05 12:03:08.851767','2022-02-05 12:03:08.851767'),(98,'2020-11-18',0,30,'読書','ITパスポート、アプリでRubyの復習','なし','なし','入力欄なし','読書','読書','2022-02-05 12:04:13.700964','2022-02-05 12:04:13.700964'),(99,'2020-11-20',3,30,'rails','Ruby on railsレッスン復習1〜3まで。','なし','なし','以前より理解が深まり、間違えずに処理を行うことができるようになってきた。','プロゲート','railsレッスン','2022-02-05 12:05:20.377025','2022-02-05 12:05:20.377025'),(100,'2020-11-24',1,0,'rails','Ruby on railsレッスン復習3\r\n\r\n◯カラム idカラムは、データベースに保存される時に数字が自動で入る。1から順に入る。 created_atカラムとupdate_atカラムはデータベースに保存された時刻が自動で入る。 \r\n ◯特定のidの投稿を取得する為には、find_byメソッドを使う。ある条件に合致するデータを取得できる。  \r\n◯ルーティングのURL部分に　: を用いてpost/:idと指定することでなんの数字を最後に入れてもshowアクションにとべるようにする。\r\n  ◯params[:id]とすることで、その値を取得することが出来る。  @post = Post.find_by(id:params[:id]) idカラムがparams[:id]である投稿データーを取得している。  \r\n◯今までルーティングを書く際getを使っていたが、フォームの値を受け取る場合は、postとする。通常はget  フォームの値を受け取る時はpostと覚える。  \r\n◯form_tagメソッドを用いると、フォームに入力されたデータを送信することができる。form_tag(送信先のURL)doのように送信先のURLを指定する。 \r\n ◯他のURLに転送するには、redirect_toメソッドを用いる。redirect_to(url)とすることでそのページに転送する。 \r\n\r\n','idの使い方が理解難しい。言葉で説明出来ない。','なし','入力欄なし','https://prog-8.com/rails5/study/3/1#/0','railsレッスン','2022-02-05 12:06:40.596523','2022-02-05 12:06:40.596523'),(101,'2020-11-25',2,0,'rails','Ruby on railsレッスン復習3  Ruby少し\r\n\r\n(理解したこと)\r\n◯textareaタグにname属性を指定すると、入力データを送信することができるようになり、name属性の値をキーとしたハッシュがrails側に送られる。フォームのデータは変数paramsで受け取る。paramsは二つの使い方がある 1、「:◯◯」ルーティングのurlから値を取得する。 2、「name=\"◯◯\"」が付いたフォームの入力内容を受け取る。  ◯orderメソッドを用いることで、投稿一覧を並び替えできる。order(カラム名:並び替えの順序)のように使う。昇順(:asc)降順(:desc)のどちらかを指定。','なし','なし','入力欄なし','\r\nhttps://prog-8.com/rails5/dojo/1/4#/4\r\n','rails 道場コース','2022-02-05 12:08:16.047611','2022-02-05 12:08:16.047611'),(102,'2020-11-26',1,20,'rails ','Ruby on rails　道場コース１\r\nトップページの作成\r\n\r\nサービス紹介ページの作成\r\n\r\nテーブルの作成\r\n投稿一覧ページを作成途中\r\n\r\n(理解したこと)\r\n新規作成にはrails new アプリケーション名をターミナルで実行する。\r\n新たにページを作るには、ビューファイルとコントローラファイルにコードを追加する。またリンクを指定する時は、link_to(”表示する文字”,\"URL\")を使用する。\r\nrails g model モデル名　content:textと入れることで作成出来る。','なし','なし\r\n','入力欄なし','https://prog-8.com/rails5/dojo/1/7#/8','rails 道場コース','2022-02-05 12:09:30.711313','2022-02-05 12:09:30.711313'),(103,'2020-11-28',1,30,'rails　道場コース','Ruby on rails　道場コース１\r\n・投稿機能を作る\r\n\r\n(理解したこと)\r\n\r\n・投稿詳細ページは投稿データのidを含め取り出せるようにする。','コマンドで新しいページを作ったり、自分でコントローラやビューに書き込む違いが少し難しい。今後理解を深める。値の取得の仕方も理解が浅い。','なし','入力欄なし','https://prog-8.com/lessons/rails5/dojo/4','rails　道場コース','2022-02-05 12:10:51.154906','2022-02-05 12:10:51.154906'),(104,'2020-11-29',3,0,'rails','Ruby on rails　道場コース１まで復習\r\n（ノートに記載しながら、理解を深めた）\r\n\r\n(理解したこと)\r\n上記のコース内容にあるスライドを転記しながら、再度復習した。','この復習を行うことで理解が浅かった内容を、深く知ることが出来た。','なし','入力欄なし','https://prog-8.com/lessons/rails5/study/3','rails 道場コース','2022-02-05 12:12:10.960983','2022-02-05 12:12:10.960983'),(105,'2020-11-30',4,0,'rails 道場コース','Ruby on rails 道場コース１\r\n学習コース　IV\r\n\r\nLinux\r\n仮想環境とは何か\r\n\r\n(理解したこと)\r\nフォームの編集や削除を行った。\r\nデータを取得する際には、find_byメソッドを使用する。\r\nリンク先を追加する時には、変数展開を用いることを忘れないようにする。\r\nLinuxとはコンピュータの全てのハードウェアを管理しているソフトウェア・OSの一種である。\r\n仮想環境とは、パソコンやサーバーなどのハードウェアの中に仮想化によって作り出されたヴァーチャル環境のこと。','なし','なし','入力欄なし','https://prog-8.com/lessons/rails5/study/4','未定','2022-02-05 12:13:37.654182','2022-02-05 12:13:37.654182'),(106,'2020-12-14',2,25,'　・コンテンツを作る。そのコンテンツを4つ並べ、レイアウトしたい。 　・背景画像の上に文字と新たな画像を挿入したい。','◯やった内容\r\n（コンテンツの作成）\r\n　・初めにlessonsクラスを作り、その中にlessonクラスを用意した。lessonクラスの中に2つのdivタグを作る。1つ目はlesson-nameタグ、２つ目はlesson1タグを用意しコンテンツの大まかな部分を作ることが出来た。lesson1クラスの中には、挿入したい画像と文字を入れて4つの言語が分かるようにグループをわけた。\r\n\r\n 　[起きた問題と解決内容]\r\n　・画像と文字を入れたが、全て縦方向に並んでいる。横に均等にしたい。lessonクラスをwidth:25%で指定すると、左詰めに均等な間隔で表示された。ページの左右均等になるように表示したい為、画像の余白を作ってみた。padding:50px 50pxと指定すると、解決した。\r\n\r\n　・画像が目立つ為、透明化させたい。透明化するには、opacity:とすることで変化出来る。１はそのまま、0.1~0.9までの透明度を指定することが出来る。透明化させることが出来たが、一つの画像しか透明化されていない。lessonの中にあるlesson1~4のタグを全てlesson1にすることで解決した。\r\n','なし','なし','なし','なし','◯明日試したい内容\r\n・タイトルの表示\r\n・プログラミングの種類を見出しとしてコンテンツの上の方に入れたい。\r\n','2022-02-05 12:22:37.652608','2022-02-05 12:22:37.652608'),(107,'2021-03-01',4,0,'・Udemyコース進める','◯簡単なトップページを作成。フォトショップを使用。\r\n＜環境設定＞\r\n・webサイトを作成するにあたり、設定することがある。上部のフォトショップボタンから環境設定に進み、単位・定規を開く。そこから単位の中にある定規と文字をピクセルに変更する。設定されている場合は、問題はない。\r\n・webデザインの解像度は72と決まっている為、それも予め設定で確認しておく。またビットは8ビット。\r\n\r\n＜効率よく仕事をする為に、取り入れるべきツール＞\r\n・スマートガイド\r\n　上部の表示から表示・非表示を選択し、スマートガイドをクリック。そうすると、一つの四角形に対して、次回作った時に自動でここですよと合わせてくれる線が出てくる。水平や垂直を測って配置する手間がはぶける。\r\n・カンバスを全て選択状態にする\r\n　⌘Aで全てを選択状態にすることが出来る。\r\n・移動ツールの裏技\r\n　キーボードの矢印キーで動かすことが出来る。普通に押すだけでは1ピクセルのみしか移動出来ない。シフトを押しながら矢印キーを押すと10ピクセルずつ移動することが出来る。10ピクセルごとに移動したくて、何度も選択ツールで測ってからやるのは面倒。シフトを押しながら一回矢印キーを押すことで、ずらすことが出来る為、覚えとくべき機能だ。\r\n・レイヤーを複製する\r\n　altキーを押しながら複製したいレイヤーをドラックすることで簡単に出来る。同じボタンを複数作成したい時には便利。\r\n・移動選択ツールを選択する場合、レイヤーから探すと時間を要する。⌘を押しながら選択したいレイヤーを押すことで、すぐに選択出来る。\r\n・レイヤーを複数選択\r\n　選択したいレイヤーを⌘を押すと、全て選択した状態になる。その状態でグループをつくることが出来る。\r\n・色調補正パネルの複製\r\n　レイヤー下に表示されているレイヤーの効果ボタンを右クリック。そこからレイヤースタイルのコピーを選択。その後は反映したいレイヤーの上で右クリックし、レイヤースタイルのペーストにすすむと同じ効果が反映される。\r\n・移動選択ツールはシフトを押すことで、1ピクセル単位で細かく移動することが出来る。\r\n\r\n＜スライスツール＞\r\n　cssやhtmlでコーティングする際に使う画像を書き出す方法。スライスツールを使い、保存したい画像を選択する。ダイアログボックスを操作し、範囲指定する。そのまま次の範囲を指定することも出来る。しかし一度終わったものは青色に変化し、変更することが出来ない。変更したい場合は、スライス選択ツールを押すと、再度調節することが出来る。ボタンやヘッダーの背景がある場合は、背景を非表示にしてから下記の操作を行う。全て選択したらファイルから書き出し、そこからweb用に保存を選択。詳細ボックスが出てきて、それぞれの画像の設定をする。アイコンは小さい為、pngの8ビットで設定する。しかし大きい画像はpngで保存するとかなり大きい容量になる為、jpegで保存する必要がある。シフトを押しながら全ての画像を選択し、保存を押す。保存する際は選択したツールのみに変更することを忘れないようにする。\r\n','なし','なし','一つのサイトを作るにあたり、長時間かかることが分かった。１ピクセル単位での調節が必要で、少しでもずれるとデザインに影響してくることが分かった。見やすく、デザイン性も求められる為、練習が必要かと思った','Udemy','・Udemyコース進める。','2022-02-05 12:49:47.274135','2022-02-05 12:49:47.274135'),(108,'2021-03-02',10,0,'・Udemyコース進める','（パターン）\r\n　背景にパターンを適用する場合は、ダウンロードしたままだと鮮明すぎて変に見える。その為、不透明度をさげることで、自然なパターンに見せることが出来る。\r\n\r\n（余白）\r\n　サイトの余白は一度決めたら基本的にその余白で配置をする。しかしテキストを入力する場合は、つめすぎるように見えることがある為、その際は２倍や３倍の値を入れる。統一することで、見やすいサイトを作成することが出来る。\r\n\r\n（点画）\r\n　ブラシツールを利用して、点画を作成することが出来る。１ピクセル単位に設定後、間隔を３８０に設定すると間隔があいた点線画像をつくることが出来る。\r\n\r\n（グラデーションツール）\r\n　一つの画像に対してグラデーションをかけたい場合は、画像を選択した状態で下にあるレイヤーマスクを追加ボタンを押す。そうすると画像の横に四角のレイヤーが追加される。そのレイヤーを選択した状態でチャンネルを表示し、目のマークを押す。そこからグラデーションツールを選択し、範囲指定をする。範囲指定後は目のマークを外し、元の画像が反映されているか確認をする。\r\n\r\n（文字と入力フォームの余白）\r\n　文字と入力フォームの余白を計算し、全体で足したり割ったりしながら平均的な値を出す。そうすることで、より見やすいデザインをつくることが出来る。\r\n','シェイプツールを使って四角形を作った際に、枠部分に二重で線が表示されることがあった。原因を追求するうちに、結果的にはエッジが調節されていなかった為と分かった。四角形を作成時に枠をつける際は、そこにも今後は注目していきたい。\r\n\r\n','前回に作成した画像やテキストの他に、新しい物を作っていると時折設定した場所からずれていることがある。一度設定し、次回から編集することのないレイヤーについてロックをかけて固定していく。上記に記載した部分の訂正でかなりの時間を要した。','小さな訂正が積み重なり、大幅な時間ロスとなった部分が多かった。編集しないレイヤーは固定しつつ、レイヤーの整理もおこないながら進めていきたい。ショートカットキーを覚え始め、使いこなせるようになってきた','Udemy','Udemyコースすすめる','2022-02-05 12:51:15.254211','2022-02-05 12:51:15.254211'),(109,'2021-03-03',8,0,'Udemyコースすすめる','・見本のサイトを真似する（３つ）\r\n※ブラシでラインを作成している際に、予定していたところより過ぎてしまった場合。長方形選択ツールを使用して、出てしまった部分を選択する。選択した状態でdeleteキーを押すと、その部分のみ消すことが出来る。\r\n','・黄金比や整列する時の比率などは少し難しいと感じる。基本的には文字や画像の間は始めに１０と決めたら統一した方が良いと前回習った。しかし真似するサイトの中では時に１５、２０と余白があいている時がある。その区別を出来るようにしていきたい。','なし','同じような加工に見えても光彩やパターンオーバーレイなどと効果が違う時がある。若干の違いに気付けるようになりたいと思った。現在は拡大をしながら、確認している。','Udemy','Udemyコースすすめる','2022-02-05 12:52:40.081906','2022-02-05 12:52:40.081906'),(110,'2021-03-05',6,0,'Udemyコース','	HTML（プロゲート学習サイト以外で学んだこと）参考サイト：Udemy												\r\n	下記のまとめは過去にプロゲートで学んでいることも含める。その中で新たに学んだことや再確認出来たことをまとめている。												\r\n													\r\n	<head>タグの中												\r\n	ヘッドタグの中には、サイトの説明や文字などの指定を入れる。												\r\n													\r\n	<head>												\r\n		<meta charset=\"utf-8\">			utf-8という文字の指定			utf-8という文字の指定すると、文字化け防止になる。					\r\n		<meta name=\"description\" content=\"サイトの説明文がここに入ります。\">						ブラウザで表示された時に出るタイトル下の説明部分					\r\n		meta name=\"keywords\" content=\"キーワード,キーワード\">						キーワード検索をした時に、あるとヒットしやすくなる。５個以上は入れないようにする。					\r\n		<meta name=\"author\" content=\"著者名\">						必ず必要ではないが、入れておいた方が良い。					\r\n		<link rel=\"stylesheet\" media=\"all\" href=\"style.css\" type=\"text/css\">						外部にあるcssを利用することを記述している。					\r\n	</head>												\r\n													\r\n	<body>タグの中												\r\n	ブラウザに表示される所をさす。												\r\n													\r\n	◯改行												\r\n	<body>												\r\n	 	<p>文字<p>											\r\n		一行の場合は、上記の書き方で良い。しかし、２行になり改行を入れたい場合は、下記のコートを参考にする。											\r\n		<p>文字をたくさん打ちます		（１行目）									\r\n		<br>改行しました</p>		（２行目）				改行したい文章の前に<br>タグを入れると、強制的に改行される。このタグは終了タグなし					\r\n	</body>												\r\n													\r\n	◯画像の挿入と説明												\r\n	<img src=\"images/main.jpg\" alt=\"画像の説明文が入る\">							画像のファイル先を最初に書いてから、その同じ階層にある画像の名前を入れる。					\r\n								alt　は万が一画像が表示されなかった場合や、目の不自由な方で音声案内をする際に読み上げられる。					\r\n													\r\n	属性												\r\n	開始タグの中に属性を入れることで、様々な効果を追加出来る。												\r\n	例：href属性やstyle属性などがある。その開始タグによって使えない属性もある為、その都度調べると良い。												\r\n													\r\n	コピーライトの書き方												\r\n	フッターのに入れるコピーライトはブラウザで表示される場合、©️となる。												\r\n	しかしHTMLで入力する際は、&copy; その後に文字を入れる。ブラウザには上記の内容で表示される。												\r\n													\r\n	<section>タグ												\r\n	<div id=\"about\">							id=\"about\"　今後変わることのない					\r\n		<section>						<section>タグとは 文書やアプリケーションの一部分となる、意味や機能をまとめる。					\r\n			<h1>文字</h1>										\r\n		</section>											\r\n	</div>												\r\n													\r\n	フォーム作成について												\r\n	お問い合わせフォームやログイン画面などを作成することが出来る。												\r\n													\r\n	ユーザが見やすいようにグループ分けする。												\r\n	<form>												\r\n		<fieldset>						グループ化して見やすく表示する					\r\n	 		<legend>基本情報</legend>					<fieldset>でグループ化した内容のタイトル					\r\n			<label for=\"name\">お名前：</label>					ラベリングすることで、そのボタンを押すと自動的にボックスにカーソルが入る。					\r\n			<input id=\"name\" type=\"text\" name=\"お名前\">					idは上記のコードのforと連携している。typeは枠の大きさ。					\r\n		</fieldset>											\r\n	<form>												\r\n													\r\n	セレクトボックスの作成												\r\n	<label for=\"category\">お問い合わせの種類</label>												\r\n	<select id=\"category\" name=\"お問い合わせの種類\">							セレクトタグで囲むと、選択肢がたくさん出てくるボックスとなる。					\r\n	 	<option>デザイン要素について</option>						選択肢はオプションタグで項目ごとにまとめていく					\r\n	 	<option>講師業について</option>											\r\n	</select>												\r\n													\r\n	ラジオボタン（丸いボタンで一度選択すると、他のボタンを押さない限りチェックが消えない）												\r\n	<input type=\"radio\">個人の方							左記の書き方で◯のあとに文字が表示される。					\r\n								radioの後に、value属性を入れるとそのボタンを押した際の処理内容がデータに送信される					\r\n													\r\n	送信・初期化ボタン												\r\n	（送信）		<input type=\"submit\" value=\"送信する\">										\r\n	（初期化）		<input type=\"reset\" value=\"初期化する\">										\r\n													\r\n	枠の中に予め文字を入れ、ユーザに入れる内容をより分かりやすく表示する方法												\r\n	開始タグの中に<placeholder=\"文章を入れる\">とすることで、枠内に文字が表示される。ユーザが文字を入力すると、消える機能になっている。												\r\n													\r\n	ログイン画面の作成												\r\n	<input type=\"password\" id=\"password\">							ユーザがパスワードを入力した際に、内容が見えない表示にする。					\r\n													\r\n	チェックボックスの作成												\r\n	<input type=\"checkbox\" for=\"save\">							四角のチェックボックスが作成される。					\r\n	<label id=\"save\">保存する</label>												\r\n													\r\n	テーブル作成												\r\n	テーブルを作成するには、<table>タグを使用する。												\r\n													\r\n	<table>												\r\n		<tr>						<tr>タグは列					\r\n			<td>文字</tr>					<td>タグは行を示す。					\r\n		</tr>											\r\n	</table>												\r\n													\r\n	テーブルに項目名を設定する。												\r\n	一番上の<tr>タグの中に、<td>タグではなく、<th>タグに変更する。												\r\n	そうすることで、ブラウザに表示される際に太字で見えるようになる。												\r\n													\r\n	テーブル属性												\r\n	音声でテーブルを読み上げる際に必要なコード。このコードを書くことで、項目名を定義することが出来る。												\r\n													\r\n	<th scope=\"col\">文字</th>							列方向に項目があることを示す。					\r\n	<th scope=\"row\">文字</th>							行方向に項目があることを示す。					\r\n													\r\n	要素												\r\n	<caption>仕事メニュー一覧</caption>							このテーブルの説明を簡潔にかく。（テーブル名）					\r\n													\r\n	<details>							上記の<caption>タグと一緒に使うことで、効果を発揮する。					\r\n		<summary>列の構成</summary>						クリックすると説明文がひらく効果					\r\n		<p>説明文</p>						説明文はpタグでかく					\r\n	</details>												\r\n													\r\n	テーブルのグループ化												\r\n	項目名部分には、<thead>							このタグで文字を囲むと、より項目名が強調されて表示					\r\n	データ部分には、<tbody>							見た目の変化はない。					\r\n	<tfoot>							ヘッドとボディの間に入れる。そこに入力しても最後に表示される					\r\n													\r\n	複数のセルを結合させる												\r\n	<th scope=\"row\" rowspan=\"2\">							隣り合わせる列方向の２つのテーブルを結合できる					\r\n	逆の場合はスコープタグの中に、colspan=\"3\"							３つの行テーブルを結合できる					\r\n													\r\n↓　3月4日（金）↓													\r\n													\r\n	文字の強調												\r\n	<em>文字</em>			イタリック状				文章の中の一部分を強調させることが出来る。					\r\n	<strong>文章</strong>							太字になる。<em>より強調が強い					\r\n	上記の２つはブラウザによって、表示される文字の書体が変わることがある。												\r\n													\r\n	引用												\r\n	（長い文章の場合）												\r\n	<blockquote>							このタグで囲んだ範囲は引用とわかるようになる。					\r\n		<h1>文字</h1>						<p>タグの部分が自動でインデントが入り、引用されていることがわかる。					\r\n	</blockquote>												\r\n													\r\n	<blockquote cite=\"#.html\">							引用元にサイトを属性として加えることが出来る					\r\n													\r\n	（短い文章の場合）												\r\n	上記のタグの中にある<p>タグにつける。												\r\n	文章、<q cite=\"#.html\">文章。							q  のタグをつけることで、短い部分の引用をしめすことが出来る。					\r\n													\r\n	（引用元を示す際）一番最後に入力する場合。												\r\n	<cite>引用元：グーグル</cite>							ブラウザに表示される時は文字の書体が変わる。					\r\n								ブラウザによってイタリック調以外にもなる。					\r\n	改行や余白												\r\n	通常の行を改行する際は、<br>タグを使用するが、下記のやり方もある。												\r\n	スペースキーで開けた空白に対しては上記のタグを使用することが出来ない。												\r\n	<pre>タグを使用して、そのタグで囲んだ部分がそのままブラウザに表示される。												\r\n	通常はHTMLで改行や余白をあけて文章を書いたとしても、反映されない。しかしこのタグを使うことで、そのままブラウザに反映することが出来る。												\r\n													\r\n	HTMLのコードをブラウザに表示させたい場合は、												\r\n	& l t ;  p  & g t ;  文章　& l t ; /p & g t ;							ブラウザでの表示は右記になる		<p>文章</p>			\r\n	上記のような特殊記号の場合に使用するタグ名												\r\n													\r\n	省略文字												\r\n	私は<abbr title=\"省略文字について”>HTML</abbr>							文章の中にある省略文字を説明するタグ					\r\n													\r\n	住所や著者名の表示												\r\n	<address>							文字の書体が変わる。					\r\n		こはたみさ						この書体はブラウザによって異なる。					\r\n		東京都豊島区											\r\n		Campus											\r\n	</address>												\r\n													\r\n	画面サイズに合わせて改行												\r\n	<p>文章<wbr/>文章</p>							画面サイズが小さくなった場合、自動で綺麗に改行してくれる。					\r\n								改行のタグ<br>の前頭に、wを加えることで指定出来る。					\r\n	リスト												\r\n	<ul>							文字の最初に点がついたリスト表示					\r\n	<ol>							リストのアイコンに数字が入る。１〜					\r\n	（定義型リスト）							用語とその用語の解説この２つからなるリストのことをさす					\r\n	<dl>												\r\n		<dt>HTML</dt>						<ul>や<ol>の変わりに入れるタグ。					\r\n		<dd>文字</dd>						dd部分には自動でインデントが入る					\r\n	</dl>												\r\n													\r\n	区切り線の表示(罫線）												\r\n	<hr>							左記のタグをいれた部分に線が入る。終了タグは必要ない。					\r\n													\r\n	リンク												\r\n	<a href=\"#\" target=\"_blank\">yahoo</a>							href属性のあとに一つスペースを開け、target=\"_blank\"を入れると、新しいタブでサイトが開かれる。					\r\n								アンダーバー を入れ忘れないように注意！					\r\n	（ファイル名を指定してリンクを作成する）												\r\n	<a href=\"html/index.html>HTML</a>							ファイルのパスを入れる。					\r\n								同じ階層にある場合はそのままで良いが、ない場合は　/　の前にファイル名を入れる。					\r\n													\r\n	ジャンプ（クリックした文字の場所へ飛ばす）							飛ばすことをフラグメントをする。					\r\n	<p>タグにid名をふる。												\r\n	<a href=\"#id名\">							<a>タグに指定リンク先を入れる。					\r\n													\r\n	動画をサイトに埋め込む												\r\n	youtubeの動画にある共有ボタンを開く。埋め込みコードをコピーし、HTMLに貼り付ける。							そのまま貼り付けることで、ブラウザに動画を埋め込むことが出来る。					\r\n	<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/MVi9IiJXyFk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>							frameborder=\"0\"とはフレームの周りに境界線をはるかどうかの値					\r\n								allowfullscreenとはフルスクリーンにすることが出来る					\r\n								<iframe>タグはインラインフレームの略。外部のウェブサイトや動画を埋め込むことが出来る。					\r\n													\r\n	サイトに外部のサイトを表示させる												\r\n	<iframe width=\"960\" height=\"615\" src=\"リンク先をコピーして貼り付け\"></iframe>							先を入れることで、外部のページを埋め込むことが出来る。					\r\n	<p>うまく表示されない方はこちらを<a href=\"#\">クリック</a></p>							このタグに対応していないブラウザの場合は、リンク文字が表示される。					\r\n								その為左記のように追加でコードを入れると、別のリンクに飛ぶことが出来る。					\r\n													\r\n	グーグルマップを表示させる方法												\r\n	<iframe src=\"#\"></iframe>							共有から地図を埋め込むを選択し、コピーして#部分に貼り付ける。					\r\n													\r\n	メールソフトを起動させる												\r\n	<a href=\"mailto:test@test.com\">メールでのお問い合わせはこちら</a>							左記のコードを入れることで、メールソフトに自動的に切り替わる。					\r\n	上記のままのせると、スパムメールが多くくる。その対策は以下。												\r\n	検索エンジンでアドレスエンティティ化と調べて導入する。												\r\n	変換した文字を上記のアドレス部分に入れる。												\r\n													\r\n	（件名を自動で入力）												\r\n	アドレスの後ろにsubject=件名での文章を記述（属性の中）							件名と本文を両方自動で入れる場合は、&を間に入力する。					\r\n	（本文）							&amo;を入れることでエラーにならず、表示させることが出来る。					\r\n	スペースをあけて、body=\"文章を記述\"とすることで、本文に自動的に入る。												\r\n													\r\n	（上記の中に改行を入れる時は）							日本語で入力する場合は、ブラウザによって文字化けが起こる。					\r\n	%0D%0Aと間に入れる。特殊記号の一つ。属性で使用する書き方。							検索エンジンでurlエンコードドットネットを使って、日本語を変換する。					\r\n								上記の変換された記号をコピーをしてそのまま入れることで、同じ表示になる。					\r\n													\r\n	ファビコンを設定する												\r\n	ブラウザ上部のタブアイコンをファビコンという。お気に入りでもそのアイコンで表示される。												\r\n	ヘッドタグの中に												\r\n	<link href=\"images/favicon.ico\" rel=\"shoettcut icon\" type=\"favicon.ico\">							設定したアイコン画像を表示させることが出来る。					\r\n													\r\n	PDFファイルをダウンロードさせる方法												\r\n	（ファイルを表示させる）												\r\n	<a href=\"ファイル名\"></a>							ファイル名を入れることで、クリックした時にページ上で表示される。					\r\n	（ユーザにファイルをダウンロードさせる）												\r\n	始めに→自分のファイル左記で右クリックし、ファイルを圧縮を選択。zipというファイルが作成される。												\r\n	ファイル名にzipを加えることで、ダウンロードで出来るようになる。												\r\n													\r\n　↓　3月5日（土）　↓													\r\n													\r\n	自動的に特定のページへジャンプする												\r\n	<meta http-equiv=\"refresh\" content=\"5;url=\"リンク先\">							閉じタグはなし。http-equivは動作を指定する。refreshはページを更新すると付加を示す。					\r\n								contentは5秒後にリンク先へ移動する					\r\n													\r\n	画像をダウンロード出来る機能												\r\n	<a href=\"画像のパス\" download=\"画像のパス\">							左記のコードをクリックすると、自動的にダウンロード出来るようになる。					\r\n													\r\n													\r\n	ナビゲーション												\r\n	<nav>グローバルナビゲーション</nav>							固定で表示するもの					\r\n													\r\n	ページを中央揃えにする。												\r\n	ボディタグの中のヘッダーとディブタグ、フッターをまとめて、ディブタグでまとめる。												\r\n													\r\n	グルーピング												\r\n	<aeticle>							自己完結した構成。このタグだけで完結できる部分を作成出来る。（例）記事一覧や新聞の一部分など					\r\n		<h1>記事タイトル</h1>											\r\n		<section>						複数のタグをグルーピングする為のタグ					\r\n			<h2>										\r\n			<p>										\r\n		</section>											\r\n	</article>												\r\n													\r\n	CSS												\r\n													\r\n	CSSの基本												\r\n	セレクタ{プロパティ:値;}							セレクタ（どの要素の）					\r\n								プロパティ（何を）					\r\n								値（どのようにする）					\r\n	インラインcss												\r\n	HTMLに直接書き込むCSSのやり方												\r\n													\r\n	ヘッドの中に												\r\n	<style>												\r\n		body{											\r\n			background-color:blue;										\r\n			}										\r\n	</style>												\r\n													\r\n	外部css												\r\n	cssファイルの最初に　@charset \"utf-8\";							HTMLと同じ文字を定義する。これを入れないと文字化けの原因になる。					\r\n													\r\n	HTMLファイルには、ヘッドタグの中に												\r\n	<link rel=\"stylesheet\" type=\"text/css\" media=\"all\" href=\"パス名\">							mdia=\"all\"は全てのメディアに対応させるという意味					\r\n													\r\n	リセットCSS												\r\n	様々なユーザのブラウザに合わせて、余分な余白や設定をリセットしてくれる機能。												\r\n	検索エンジンから調べてリセット方法を適用する。												\r\n													\r\n	全ての要素のスタイルを消す												\r\n	✴︎{							✴︎は全ての要素に指示をすることが出来る。					\r\n		margin: 0;						margin paddingは余白を消す。					\r\n		padding: 0;											\r\n		list-style: none;						リストのアイコンを消すことが出来る（黒丸など）					\r\n	}												\r\n													\r\n	アンカータグの下線を消す（aタグの中）												\r\n	text-decoration: none;							デフォルトでは下線が入る為、消したい時は左記のコードをうつ。					\r\n													\r\n	id名をcssにかきたい場合は、												\r\n	section#id名							#id名とすることで、細かく指定出来る。					\r\n													\r\n	コメントアウトの記述												\r\n	/* コメント部分  */							スラッシュと✴︎の間が見えないコメントとなる。					\r\n													\r\n	フォントの種類を指定する												\r\n	フォントによってダブルクォーテーションが必要である。												\r\n	カンマで区切り、もしユーザの対応していないフォントがあった場合。その後ろのフォントが適用される。												\r\n													\r\n	Googleフォントを使用する												\r\n	グーグルウェブフォントを適用するには、グーグルフォントを選ぶ。							この指定でユーザに見せることが出来る					\r\n	そこからlinkタグをコピーし、ヘッドタグの中に埋め込む。												\r\n	その後反映させたい文字にcssの書き方で打ち込む。												\r\n													\r\n	文字の大きさ												\r\n	絶対単位と相対単位がある。												\r\n													\r\n	絶対単位：ミリやセンチやポイントなど												\r\n	相対単位：ある大きさを基準としたもの。親要素に対する倍率で指定される。emやpx、％など												\r\n													\r\n	文字の頭文字のみ大きくする												\r\n	HTMLで変えたい文字を<SPAN>タグで記述。												\r\n													\r\n	文字の太さを変更する												\r\n	font-weight			9段階ある。（１００〜９００）9段階あるとは限らない為、下でやった方がよい									\r\n				boldは太くする									\r\n				nomalはデフォルトの太さ									\r\n				ligtherは一番細く									\r\n				bolderは一番太い									\r\n													\r\n	下線のデコレーション												\r\n	text-decoration: underline;							下線					\r\n	text-decoration: overline;							テキストの上に線がつく					\r\n	text-decoration: line-through;							打ち消し線　テキストの真ん中に線が入る					\r\n													\r\n	文章の行間を指定する												\r\n	line-height: nomal;							デフォルト					\r\n	line-height: 100px;							数値＋単位					\r\n	line-height: 1.5 ;							1.5倍の数値の設定					\r\n	line-height: 200%;							2倍の倍率で行間が設定					\r\n													\r\n	フォントの設定を一括で行う												\r\n	font: bold 80px/80px フォント名							一括で行うことが出来る。太さや大きさの間はスラッシュで指定。					\r\n								入力する順番は太さ・大きさ・スラッシュ・行間・フォントファミリー。					\r\n													\r\n	ブロックタイプ要素とインライン要素												\r\n	h1やpタグはブロック												\r\n	strongなどがインライン												\r\n													\r\n	ボックスモデルの概念												\r\n	padding			内側の余白を意味。ボーダーの内側の領域									\r\n	border			ボーダーの外側にある枠線のこと。境界線をひくことができる									\r\n	maegin			隣り合うボックスとの余白部分の調節する為の領域									\r\n													\r\n	高さと幅												\r\n	width:auto;			左記にするとブラウザに表示される大きさに対して、自動で調節してくれる機能									\r\n													\r\n	境界線												\r\n	境界線の種類は多くある。												\r\n													\r\n	インライン要素をブロック要素に変更する。反対にも適用												\r\n	display: inlin-bolck							インラインからブロック要素へ					\r\n													\r\n	ボックスの角を丸くする												\r\n	border-radius:左上　右上　右下　左下							左上の角から時計回りに反映される					\r\n													\r\n	背景画像の表示												\r\n	background: url（パス）;												\r\n	url（パス）の後に、スペースをあけて												\r\n	no-repeat;							画像の繰り返しをなくすことが出来る。					\r\n	repeat-x;												\r\n													\r\n	background:url() no-repeat right top;							右上に画像に配置することが出来る。					\r\n													\r\n	スクロール出来る背景画像												\r\n	background-repeat: no-repeat;							背景画像を繰り返さない					\r\n	background-position: right bottom;							背景画像を表示の右下に配置					\r\n	background-attachment: fixed;							背景画像を表示されている画面の枠内に配置し、スクロールごとに同じ場所へ					\r\n													\r\n	テキスト（文字）に影をつける方法												\r\n	text-shadow:左右の位置　上下の位置　　影のサイズ　色;							左上方向にしたい場合は、マイナスを指定すると影の位置がずれる					\r\n								色はカラーピッカーから選び、不透明度を下げる。					\r\n													\r\n	ボックスに影をつける												\r\n	box-shadow:左右の位置　上下の位置　　影のサイズ　色;							浮き出た感じにしたい時は左右と上下を０にする。					\r\n													\r\n	背景の色をグラデーションにする												\r\n	linear-gradient(#上の色,#下の色);							上から下に指定した色のグラデーションをかけることが出来る。古いブラウザには反映できない場合がある。					\r\n	検索エンジンでcss gradient generatorと調べ、指定したい色を打ちコードを自動で変換してもらう。そうすることで、簡単にグラデーションのcssをかくこともできる。												\r\n													\r\n	リストマーカーを画像にする												\r\n	list-style-image: url(パス);							パスを打ち込むことで、アイコンとして画像を設定出来る。しかし位置の調節が出来ない。					\r\n													\r\n	background: url(パス) no-repeat;							背景画像としてアイコンを設定する方法。					\r\n	padding-left: 30px;							そのまま余白を設定することで、文字に対して綺麗に配置することが出来る。					\r\n													\r\n	タグの横幅と縦幅の指定方法												\r\n	①タブの中の大きさを設定する。ウェブサイトの高さはほぼautoを設定するようにするのが基本的。												\r\n	②marginで大きなタグに対して余白を設定する。												\r\n	③margin: 0 auto 0 auto ;					横幅を必ず入れる。入れた数字から計算して中央に揃えることが出来る。							\r\n	wifth:900px;												\r\n													\r\n	ボックスを横並びにする												\r\n	float:		left					メインコンテンツやサイドバーなどを浮かせて配置する機能。					\r\n			right										\r\n			none										\r\n													\r\n	ボックスの浮遊化を解除する												\r\n	clear:		left					左寄せ解除					\r\n			right					右寄せ					\r\n			both					両方解除する					\r\n	HTMLファイルにディブタグを作り、クラス名をclearにする。空のボックスをつくる。cssで上記をうつ。												\r\n	クラス名に直接clearfixと入れることもできる。												\r\n													\r\n	要素の位置を指定する方法												\r\n	position:		relative					入力した要素の左上を基準点とする。ボックスの基準点を軸に					\r\n			absolute					上の設定を元に絶対的に指定することが出来る。					\r\n			topやleftなどで数値を入れる。										\r\n													\r\n	スクロールするとついてくる機能												\r\n	position:fixed;												\r\n	下に数値を指定												\r\n	上記を指定すると、他にしてしたポジションの設定がなくなる。余白を入れるようにする。												\r\n													\r\n	ボックスからはみ出た要素をコントロールする												\r\n	overflow:		hidden					はみ出た部分を消す					\r\n			scroll					スクロールさせ、常にスクロールバーを出す					\r\n			visible					デフォルト値。はみ出た部分を消す。					\r\n			auto					必要であればスクロール、スクロールバーを出す。					\r\n													\r\n			scroll										\r\n	over-flow-x :		hidden;					横方向にスクロールするのを防ぐ。					\r\n													\r\n	画像を切り出す												\r\n	上記のoverflowを利用して、数値を入れることで切り出すことが出来る。												\r\n													\r\n	擬似クラスの使い方												\r\n	a:hover{  }							マウスポインターがきた時に色が変わる。					\r\n	a:active{  }							クリックした後に色が変わる。					\r\n													\r\n	リストの最初と最後だけcssをかける												\r\n	li:first-child{  }							一番上のリストにcssをかける					\r\n								最後の指定はlast-childとすると出来る。					\r\n	li:nth-child( 2  ) {  }							親要素の子要素に対して数えて２つ目にcssを適用出来る。全て上から数える					\r\n	li:nth-of-type( 2 ) {  }							直接のタグの順番で指定出来る。指定した要素のみ					\r\n								色々な行数の指定方法がある為、その都度調べて対応していく。					\r\n													\r\n	最初のcssをかける												\r\n	p::first-line {   }							最初の一行にcssをかける。コロンは２つ！					\r\n	p::first-leter(   }							最初の一文字目にcssがかかる					\r\n													\r\n	空要素に対してcssをかける												\r\n	td:empty{  }							擬似クラスを使うことで、何もないボックスにcssをかけることが出来る。					\r\n													\r\n	隣接セレクタ												\r\n	h1 + p							h1タグの直下にあるpタグを指定					\r\n													\r\n	チェックボックスにチェックを入れた際に、文字の色を太くする												\r\n	input:checked  +  label {							input:checked  チェックした時に。					\r\n		font-weight:bold;											\r\n			}										\r\n													\r\n	境界線を入れる場合は、画像の大きさをその分減らすようにする。												\r\n													','　フロートをかけた場合に、フロートを解除しなければいけないと学んだ。少し難しいと感じる為、今後はやりながらコツをつかんでいきたい。','なし','一通りのサイト作成について理解することが出来た。余白を細かく指定する為には様々なコードを使う必要があると知った。一つずつ丁寧に行い、始めはおおまかにグルーピングするとやりやすいと感じた。','Udemyコース、ネットにある内容を勉強','ネットにあるサイトを真似してみる','2022-02-05 12:55:20.929013','2022-02-05 12:55:20.929013'),(111,'2021-03-06',8,0,'Udemyコースすすめる','以前フォトショップで作成したサイトを実装する。','なし','なし\r\n','動きのないサイトは一通り作成出来るようになった。しかし、自分が作りたいサイトは動きをついている物の為、今後はその勉強にシフトしていきたい。','Udemy別のコースをすすめる','別コースcss','2022-02-05 12:56:59.078029','2022-02-05 12:56:59.078029'),(112,'2021-03-08',9,0,'Udemyコース','✴︎前回習った内容に加えて、知ったことをまとめる。また前回曖昧に理解していて、深く理解できた所も合わせてかいていく。\r\n◯インライン要素とブロック要素　インライン要素に変換\r\n　div  body　タグなどはブロック要素\r\n   span  a    　タグなどはインライン要素\r\nインライン要素のままでは、高さや幅を指定することが出来ない。ブロック要素やインラインブロック要素にすることで、高さや幅を自由に変えることが出来る。インライン要素をブロックまたはインライン要素にするには、cssを記述する時にdisplay: inlin-blockまたはbrockと記述することでブロック要素に強制的に変えることが出来る。ブロック要素にすることで、より幅広くcssをつけることが出来る。\r\n\r\n◯自動補完機能について\r\n　VSコードの中に自動補完機能が元から備わっている。これを利用することで、効率良く記述していくことが出来る。指定したいクラスやタグ名を記述し、タブキーを押すことで自動的に開始タグと終了タグが生成される。\r\n（例）\r\n・div　タブキー　：　<div></div>\r\n・　#container  タブキー　：　<div id=”container”></div> \r\n　　→id名作成時は、先頭に#をつける。\r\n・ .number　タブキー　：　<div class=”number”></div>\r\n　　→class名の先頭には、コンマをつける。\r\n・ #container.number タブキー：<div id=”container” class=”number”></dov>\r\n　　→二つ同時にディブタグの中に入れることが出来る。\r\n・ .container > span*3 タブキー　：↓\r\n　<div id=”container”>\r\n        <span></span>\r\n        <span></span>\r\n        <span></span>\r\n   </div>\r\n　id名とspanタグをそれぞれ作ることが出来る。クラスを記述している時にはspan-$とすることで上から順番にクラス名に番号をつけることが出来る。\r\n\r\n\r\n◯transitionプロパティの使い方について\r\n　画像やボタンを要素に対して、アニメーションをつけることが出来る。JavaScriptを使用せずに、簡単にアニメーション効果をつけることが出来る為、単純なアニメーションをつける際にはこちらを用いる。\r\n（css記述例）\r\ntransition: ①all②0.3s③ease④3s ;\r\n→要素の上にホバーした際に、3秒後に動き0.3秒かけて文字や背景色が変化する。\r\n\r\n上記の①〜④はそれぞれ分けて記述することも出来る。\r\n①transition-property\r\n　変化させたいcssを選択。allだと一括。colorだと色の変化を指定。\r\n②transition-duration\r\n　変化の開始から終了までにかかる時間。2sだと2秒かけて表現される。　　\r\n③transition-timing-function\r\n　変化の仕方をさす。\r\n　（設定値）\r\n　　・ease　開始と終了を滑らかに\r\n　　・linear　一定\r\n　　・ease-in　開始がゆっくり\r\n　　・ease-out　終了がゆっくり\r\n　　・ease-in-put　開始と終了がゆっくり\r\n④transition-delay\r\n　指定した変化を何秒後に始めるか。3sだとホバーして3秒後に効果が始めることをさす。\r\n\r\n◯sassを使ったcssの記述方法\r\n　見やすく綺麗に記述する為の方法。今までの記述方法とは少し異なる。\r\n&という記号を使い、入れ子の記述を簡単にすることが出来る。タグ同士が同じ場合は、&がない記述方法も出来る。hoverなどは必ずつけるようにする。\r\n\r\n◯box-shadow\r\n　要素に対して影をつけることが出来る。引数によって様々な指定が出来る。\r\nbox-sadow : 左右の向きpx  上下の向きpx  ぼかしpx  広がりpx  色  内側指定;\r\n最後の内側指定は要素の中にむけて影を指定する。insetと記述することで可能となる。基本的には必要ない。\r\n\r\n\r\n\r\n◯ボタンの作成\r\n　ボタン上にホバーした際に、効果をつけることが出来る。\r\n・letter-spacing :  3px ;　→　行間を3px広げる。\r\n・border-radius :  7px ; 　→　枠線を角丸に指定する。\r\n\r\n◯transformプロパティ\r\n・要素の移動、変形を表現する時に記述。\r\n①translate（）（移動する）・・・横・縦に移動する値を設定出来る。（例）translatte(50px,50px)\r\n　✴︎translate3d()　・・・x,y,z軸の移動を一括で設定。\r\n②rotate()　（回転する）　・・・記述種類は上記と同じ。\r\n③scale()　　（伸縮する）　・・・同上。\r\n④skew()　　（歪み）・・・同上。\r\n↓その他プロパティ\r\n・transform-origin・・・要素を動かしたり、変形させる起点を設定。\r\n・transform-style・・・要素の子要素を３D配置、平面配置かを設定。\r\n・perspective・・・要素に遠近感を与える効果。\r\n・perspective-origin・・・ユーザからの見え方を決める。\r\n\r\n◯positionプロパティ\r\n値として↓\r\n・static・・・初期値。\r\n・relative・・・相対位置。そこの位置を起点と設定する。\r\n・absolute・・・絶対位置。左上を基準とする。\r\n・fixed・・・スクロールしても画面上の位置として固定される。\r\n\r\n◯z-indexプロパティ・・・ボックスの重なりの順序を指定。\r\n・値が大きいものほど上になる。\r\n・auto　親要素と同じ階層になる。初期値。\r\n\r\n◯擬似要素について・・・要素の一部に対して、スタイルを適用。\r\n・　::berore・・・　要素の前にテキストを挿入。contentプロパティが必要。\r\n・　::after・・・上記の反対で要素の後にテキストを挿入。\r\n・　::first-letter・・・要素の一行目の最初の一文字に適用。\r\n・　::first-line・・・要素の一行目に適用。\r\n・　::link・・・リンクを押していない。\r\n・　::visited・・・リンクを押した後に適用。\r\n・　::hover・・・要素にマウスがホバーした時。\r\n・　::active・・・リンクを押している時。\r\n・　::nth-child(n)・・・親要素のn番目を指定してスタイルを適用。\r\n・　::not()・・・親要素内の指定の要素を除外して、スタイルを適用させる。\r\n・　::nth-of-type()・・・同じ種類のn番目の要素を指定してスタイルを適用。\r\n\r\n◯アニメーションcssについて\r\n　animationプロパティを使用して、開始かた終了のまでの時間を指定出来る。\r\n・animation-name・・・名前。\r\n・animation-duration・・・始まって終わるまでの時間を指定。\r\n・animation-timing-function・・・繰り返す回数を指定。\r\n・animation-delay・・・再生方向を指定。\r\n・animation-fill-state・・・開始前、終了後のスタイルを指定\r\n・animation-play-state・・・再生・停止\r\n↓キーフレーム↓\r\n（１）@keyframes　アニメーションの名前　{\r\n	0%{\r\n    	     }\r\n	100% {\r\n   	     }\r\n（２）@keyframes　アニメーションの名前　{\r\n	from {\r\n	}\r\n	to {\r\n	}\r\n\r\n◯sassのfor文（ループ処理）\r\n@for  $i from 1 through 2 {   }　１〜２までループ処理をする。\r\n\r\n◯sassのeach文\r\n@each $名前 in ＄名前　{  } \r\n\r\n\r\n','以前sassの書き方ではなかった為、始めこの書き方で記述していくのは難しかった。','なし','ただコードを書くだけでなく、見やすく省略する記述方法が多くあり勉強になった。働く時は他人と共有して進めていく所があると思う為、今後は習った記述で進めていきたい。\r\n記述する中で単なるスペルミスが目立つ為、気をつけていきたい。','なし','続き','2022-02-05 12:58:46.593835','2022-02-05 12:58:46.593835'),(113,'2021-03-09',6,0,'JS講座','◯関数の定義\r\nfunction hello(name) {\r\n	console.log(‘hello’ + name );\r\n}\r\n\r\nhello(‘code mafia’);\r\n\r\n上記を実行した場合、hello code mafiaとコンソールに表示される。\r\n\r\n◯プロパティとメソッド\r\nconsole.log(hello,length)→変数定義した文字数を数えることが出来る。\r\nまた上記以外に、toUpperCase()とすると、全て大文字表記になる。\r\nsuvstring(0,5)→０〜５までの文字を数えて表示。\r\n\r\n◯for文\r\nfor(let i in arry) {\r\n	console.log(arry[i])\r\n                        }・・・添字を取り出すことが出来る。添字とは配列の中身をさす。\r\nfor(let v of arry) {\r\n	console.log(v)\r\n                        }・・・値を取り出すことが出来る。\r\n\r\n◯コールバック関数\r\n　引数には関数もとることが出来る。nameという引数をgetname()のように関数を指定することが出来る。\r\n\r\n理解が浅い・解決するまでに時間を要した作業・特記事項　　　　　　　　\r\n　以前からJavaScriptの関数定義は苦手としている。今回は前回よりも理解はしているが、完全に理解することは出来なかった。\r\n','なし','なし','繰り返し関数定義の問題をこなすことで、少しずつ理解は出来てきている。しかし、もう少し自分でも調べ、理解に繋げる必要があると思う。','Udemy','・理解が浅い関数やプロパティを調べ、まとめる','2022-02-05 13:00:12.394869','2022-02-05 13:00:12.394869'),(114,'2021-03-10',2,0,'理解の浅い関数やプロパティを調べる','◯調べて内容は8~9日分に追加でまとめた。','どのような場面で使う関数またはプロパティなのかを覚えることが出来てきた。少しずつ実践で試していきたい。','なし','繰り返しコードの記述方法を見ることで、少しずつ理解出来るようになってきた。しかし実際に一から自分で書くとなると、時間がかかったり調べながらではないと難しい。実践を踏んでいきたい。','なし','講座をすすめる','2022-02-05 13:07:56.891820','2022-02-05 13:07:56.891820'),(115,'2021-03-11',4,0,'講座すすめる','◯domについて\r\n　ブラウザのコンソールからHTMLを操作し、開発に便利な機能である。またjsからdocument.queryselecterと入力し、クラスやアイディなどを指定すると、取得することが出来る。直接書き換えることが出来る為、便利である。\r\n\r\n◯callback関数について\r\n　引数に別の関数を指定して、使用する関数のこと。\r\n　（例）↓\r\nfunction 関数( 別の関数（callbck） ) {\r\n   //何らかの処理を記述する\r\n \r\n   //引数に指定した関数を実行する\r\n}\r\n   callback();\r\n\r\n◯reduceメソッドについて\r\n　配列の各要素を一つにまとめることが出来る関数。\r\n\r\n◯forEach関数\r\nforEach関数は、この配列に格納されたデータをループ処理（繰り返し処理）により、一気に処理したい時に使う。\r\n\r\n','・様々な関数の理解が乏しい','なし','一つひとつの関数を理解することが難しい。慣れない記述が多く、混乱している。','なし','講座の続き','2022-02-05 13:08:47.967578','2022-02-05 13:08:47.967578'),(116,'2021-03-12',4,0,'ＪＳ講座すすめる','◯addEventListener（イベントリスナーを登録する。）\r\n　・要素.addEventListener(イベント, 関数, オプション);\r\n　→イベントを追加することが出来る。\r\n\r\n◯Domちloadについて\r\nDomは、ブラウザがHTMLのコードを取得した時に発火されるもの。\r\nloadは全ての表示する物、時間の要する画像が表示された時に発火するもの。\r\n\r\n◯クラスを使用してコードの再利用性を高める方法。\r\n→クラスとは、値を格納することが出来る機能のこと。\r\nclass TextAnimation() {\r\n	constructor(el) { →クラスが初期化された時に呼び出される関数。\r\n	 処理内容\r\n	}\r\n}\r\nnew TextAnimation();\r\n上記をインスタント化するという。\r\n\r\n◯thisという変数をつかう。\r\n　thisを指定した直前の親要素が反映される。どこの要素が反映されているかわからない場合は、コンソールで呼び出して確認をしていく。\r\n\r\n◯スクロールする機能を作ろう。\r\n　物体の交差を監視するものをさす。長方形とウィンドウの画面の交差を監視するものとすれば、長方形が画面に見えた場合は、inviewとなる。長方形が消えた場合は、outviewとなる。\r\n','なし','なし','コードの見やすい記述方法を学ぶことが出来た。慣れるまでに時間を要すると思うが、少しずつ挑戦していきたい。一つひとつの関数名・変数名に疑問を持ち、調べながら進めることで理解を深めることが出来てきている。今後も続けていきたい。','Udemy','講座をすすめる','2022-02-05 13:10:02.146044','2022-02-05 13:10:02.146044'),(117,'2021-03-13',8,0,'講座すすめる','◯ジャバスクリプトの読み込む順番\r\n　メインjsよりも上に記述すう必要がある。でないと定義されていないとなり、内容が適用されない。\r\n\r\n◯IntersectionObserverについて・・・前回の続き。\r\n\r\n◯第２引数に入れる、オプションについて\r\n・rootMarigin\r\npxをつける\r\n-は内側に余白\r\n\r\n・threshold・・・入る辺は０、出る時にあたる辺が１とされている。\r\n\r\n\r\n◯ネット検索でswiper.jsと調べて、使用する方法。\r\n→より高度なアニメーションをつけたい時に使用するツール。ネットに記載してあるコードを読み込み、それを自分のサイトに利用して作成していける。\r\n','なし','なし','アニメーションの適用には様々な方法があることが分かった。cssでは実装できない効果はjsを付与して行っていくことも知った。またサイト作成には効率良く動かせるようにしなければいけないと知った。そのことも考えながらコードを記述していきたいと思う。','Udemy','講座続き','2022-02-05 13:11:08.000336','2022-02-05 13:11:08.000336'),(118,'2021-03-14',4,0,'模擬サイト作成','◯ノーマライズcssとリセットcss\r\n　サイトを作る際には、必ずリセットしないと後から後悔する。このリセットｃｓｓを途中から入れると綺麗に配置した要素がずれていくことがある為、気をつける。\r\n・ノーマライズcssはブラウザに合わせて適度にマージンをつけて、位置の調節をしてくれる。\r\n・リセットcssは全ての余白やブラウザのデフォルト値を消してくれる。\r\n\r\n◯フォントを指定する時の順番\r\n　font-faimilyをcssに入れる場合は、記述する順番に気を付ける。ローマ字表記が出来る英字を先に記述する。日本語はその後に書く。\r\n\r\n◯ブラウザのデフォルトフォントサイズは１６pxとなっている。\r\n\r\n◯flexboxについて\r\n　親要素・子要素に対してそれぞれ位置の配置を簡単に変えることが出来る。参考サイト：https://webdesign-trends.net/entry/8148\r\n','jsを記述する際に引数・変数の理解が浅い部分があった。','なし','一つのサイトを作成するには、様々な知識を組み合わせなければいけないと感じた。cssだけを身につけていても、自分の思うサイトは作成出来ないと感じた。苦手な所は少しずつ克服していきたい。','なし','自作サイト作成','2022-02-05 13:12:30.321907','2022-02-05 13:12:30.321907'),(119,'2021-03-15',8,0,'・講座を聞いて、模擬サイトづくり。 ・自作サイトの作成。','◯今までやってきた講座を振り返りながら、自作サイトを進める。まずはどのようなサイトにするかを考えた。\r\n\r\n◯様々なウェブサイトを見て、勉強をした。\r\n\r\n◯フォトショップ を使用して、フレームワークをつくる。\r\n','なし','なし','サイトを作成するにはデザイン性を含め考える為、時間がかかる。また色んなサイトを見ることで、最近のデザインについて知ることが出来た。','なし','フレームワークの続き','2022-02-05 13:13:56.931492','2022-02-05 13:13:56.931492'),(120,'2021-03-16',8,0,'自作サイト（フレームワークづくり）・・・作成途中の画像下記に添付','◯トップページのメイン作成\r\n　・英字のフォントをネットからダウンロードして、使用した。自分のサイトのイメージに合わせて何回も調節し配置した。ダウンロードのフォントによって、文字の太さが調節出来ないことが分かった。文字の大きさで表現することで、解決することが出来た。\r\n\r\n◯メイン画像の背景\r\n　メインの文字背景にぼかしを使用したいと思い、レイヤー効果を使用して挑戦した。初めは上手くいかず、ネットで方法を検索し実行してみた。しかし、背景画像がない為、適用することが出来なかった。その為、文字に対して奥行きがあるような効果をもたすことにした。文字の大きさやドロップシャドウを調節して行った。\r\n\r\n◯アイコン作成\r\n　メイン文字の頭文字を使用して、自作アイコンの作成に取り組んだ。シェイプツールやテキスト、ブラシツールを使用して完成することが出来た。そのアイコンを別の場所でも使用したかった為、一つの画像として切り取ることにした。選択範囲を指定して切り取りツールを使用したが、全体のカンバスが指定され、上手く切り取ることが出来ない。ネットで方法を検索すると、スライス選択ツールを使用した切り取りの方法があった。その方法で一つの画像として切り取ることが出来た。\r\n\r\n◯完成したレイヤーを綺麗に配置する。\r\n　基本的に２０ピクセルの余白を指定して、配置するようにした。定規ツールを使い、慎重に進めることが出来た。\r\n\r\n\r\n理解が浅い・解決するまでに時間を要した作業・特記事項　　　　　　　　\r\n　メイン画像の背景については、ぼかしツールを試行錯誤して使用した。結果的には適用しなかったが、よい経験となった。ここには時間を要してしまった。\r\n\r\n勉強して感じたこと　　　　　　　　　　　　　　　　　　　　　　　　　\r\n　一つの画像・アイコンを作るにはとても時間を要することを再理解した。しかし自分でデザインをして、配置するのは楽しさを感じる。\r\n\r\n　　　　　　　　　　　　　　　　　　　　　　　　\r\n\r\n\r\n','なし','なし','なし','イメージ画像ある','・サイトのコンテンツ部分作成','2022-02-05 13:15:15.941866','2022-02-05 13:15:15.941866'),(121,'2021-03-17',8,30,'自作サイトのフレームワークづくり（トップページ完成）','◯スクロールすると、プロフィールやコンタクト画面が流れるようなデザインを作成。その一つひとつにMOREボタンを作ることで、別のページにリンクさせ詳細ページを表示するようにした。\r\n\r\n◯画面に対して綺麗に３等分となるように、計算しながらシェイプツールやアイコンを配置することが出来た。\r\n\r\n◯トップページ作成後はヘッダー・フッターはそのまま他のサイトにも使用した。\r\n','なし','なし','同じようなデザインを使用することで、効率的に作成出来ることが分かってきた。しかし余白に対してシェイプツールを計算する時などに混乱してしまった為、繰り返す中で慣れていきたいと思った。','なし','・お問い合わせフォームつくり\r\n・HTMLで記述していく。\r\n','2022-02-05 13:16:17.007463','2022-02-05 13:16:17.007463'),(122,'2021-03-19',6,0,'・デザインの最終変更 ・どのようにサイトを作成していくかを考える。','◯デザイン変更\r\n・メイン画面の文字や写真に違和感があり、変更。サイトのイメージはシンプルの為、メインには文字のみに変更した。\r\n・文字の上に花を重ねて可愛いデザインをしたつもりだが、結果文字化けしているように感じる。文字をなくしシンプルに変更。\r\n\r\n◯サイト作成\r\n・環境構築\r\n　以前はruby on railsで開発をしていた。しかし新たなサイトを作成するとなると新しく環境構築する必要があると感じた。Udemy講座で習った内容は環境構築はせず行う方法だった。今まで習ったことも生かしたい為、railsで開発する方向で進める。一から開発する為に、ネットに乗っている情報を見ながら進めようとした。以前とはバージョンが違う為、再度理解を深める必要がある。\r\n','・railsのバージョンが違う為、どのようにして環境構築をするのか疑問に思う。','なし','デザインによって人に与える感情は違うと認識した。そのことを頭において今後もデザインを考えていきたいと思う。\r\n　どの開発の仕方が良いのかを考えていると時間を要した。以前勉強したことも生かせるrailsを選択したが、実際に一から一人で環境構築をすると上手くいかない。\r\n','画像別保存','環境構築の完了','2022-02-05 13:17:49.485484','2022-02-05 13:17:49.485484'),(123,'2021-03-22',9,30,'環境構築完了','◯多くのエラーが出た。\r\n・ファイルがない。\r\n・docker-compose.yml内の記述内容が間違っている。またインデントがおかしい。\r\n・build出来ない\r\n上記のエラーを検索しながら、一つずつ解決した。\r\n\r\n◯インデントの確認\r\n docker-compose.ymlのインデント確認は、vsコードで行った。コードにして見ることでインデントがおかしいところを見つけることが出来た。\r\n\r\n◯上記を踏まえて実際にインストール\r\n・エラーが多くでたが、２回始めからやり直すと出来た。\r\n','なし','・エラー内容を知り、解決するまでに時間を要した。','初心者には一から構築するのは難しいと感じた','なし','・vsコードで実際に開発を進める。','2022-02-05 13:18:52.812715','2022-02-05 13:18:52.812715'),(124,'2021-03-25',2,30,'・ナビゲーション作成 ・ruby on rails の記述方法を理解する','◯ナビゲーション\r\n　始めportforio.erbにhtmlやbodyタグを用意し、記述した。ある程度記述したところで更新すると、ブラウザに表示されている。しかし余分な余白があり、検証で調べるとbodyやheadタグが重複していた。application.erbのhtmlが読み込まれていた為であった。全体レイアウトの為そうなることを理解した。\r\n（リスト文字を横にする）\r\n・floatプロパティを使用し、リストを横並び。\r\n・positionプロパティでヘッダーをrerativeにして、リストをabusoruteにすると綺麗に配列することが出来た。\r\n\r\n◯railsについて\r\n・ruby埋め込みになっている為、変数を入れる時は<%=    %>で囲む。\r\n・全てのレイアウトはapplication.erbに記述すると良い。\r\n・テンプレートが同じ場合は、アクション・コントローラを操作して記述していく。\r\n','・前日、疑問に思っていた共通レイアウトについて、より理解を深めることが出来た。','なし','テキストや動画で学んだことを実際に実践すると、理解不足だったり時間を要してしまうことが分かった。丁寧に進めていきたいと思う。','なし','ナビゲーションの作成','2022-02-05 13:19:57.969434','2022-02-05 13:19:57.969434'),(125,'2021-03-26',5,0,'・ヘッダーの完成 ・メインcssの記述方法','◯ヘッダー\r\n・文字は統一して同じ色が適用されるように、$cblue：カラーコードを指定した。\r\n・ツイッターやインスタグラム などのアイコンは始め設定すると、大きさがその画像サイズのまま表示される。cssでサイズを指定し、文字の大きさに合わせて適用した。アイコンの色を文字色と同じにしたい為、cssで塗りつぶしできないかと考えた。ネットで調べたが、そのようなcssは付与できない。フォトショップ のレイヤー効果、カラーオーバーレイを使用することで色を塗りつぶすことが出来た。保存をかけると自動でアイコンの色を変化した。\r\n・文字の余白は基本的に２０ピクセルとする。始めはリセットcssを定義していなかった為、ブラウザにデフォルトで設定してある余白が入っていた。リセットcssを定義することで、余分な余白を消すことができた。\r\n・リセットcssには種類があったが、今回は全て自分で大きさを調節したい為、全て余白がリセットされるものをコピーして、cssファイルに保存した。\r\n\r\n◯cssについて\r\n・railsにはメインcssがあり、その中に記述することで全てのファイルに適用出来る。ヘッダーの内容は全てcssに記述するようにした。デスクトップにのみ適用するデザインは別途ファイルを作った。\r\n・メイン以外のcssは、desktop.scssとmobile.scssに記述した。メインのcss上部に@import : desktop.scssと記述することで、適用出来るようにした。モバイルcssも同様。\r\n','メインcssについて少しずつ理解してきたが、ブラウザの大きさによって変化するcssをどのように記述していく方が効率良いのかについて理解が浅い。今後cssを記述していくなかで、理解していきたい。','なし','メインcssの利便性について理解が浅い為、やりながら理解を深めていきたい。railsについて理解が浅い部分が多い為、そこも理解深めていきたいと思う。','なし','ナビゲーション作成','2022-02-05 13:20:58.334435','2022-02-05 13:20:58.334435'),(126,'2021-03-26',5,0,'ナビゲーション作成','◯ナビゲーションの作成\r\n・floatで指定したリストが思うように移動しない。原因を探る中でブラウザのデフォルトで設定してあるマージンではないかと学んだことから思い出した。リセットcssについて再理解をし、html5のリセットcssをリンクで読み込んだ。読み込みが成功すると、全てのマージンが消えた。消えた上で設定すると、自分の思う通りの位置に配置することが出来た。\r\n・アイコンの読み込み・・・始めはapp/assets/imagesの中に画像を取り入れパスを記述してコードをかいた。しかし反映されない。もう一つのやり方、publicフォルダに入れ、imgタグで記述すると挿入することが出来た。大きさを文字と同じ高さに設定し、調節するようにした。二つのアイコンは文字色と同じ色に統一したいと思い、ネットで調べて行ってみた。モノクロや透明化することは出来るが、画像自体を塗りつぶすcssは見当たらなかった。その為、保存している画像をphotoshopのレイヤー効果、カラーオーバーレイで文字色と同じ色を指定することで、変えることが出来た。\r\n・文字色の指定。\r\n','cssで記述する際の&の記述方法が少し曖昧な部分がある。','なし','自分でエラー内容や配置できない原因に気付けるようになってきている。しかし気付けるまでに時間を要する為、丁寧かつ迅速に記述出来るように意識して取り組みたい。','なし','メイン画面の作成','2022-02-05 13:21:52.973895','2022-02-05 13:21:52.973895'),(127,'2021-03-28',3,0,'・レスポンシブデザインについて ・ｃｓｓを整理する','◯レスポンシブデザイン\r\n・モバイルファーストを考えて作成していくことにした。スマホのサイズで作りながら、デスクトップで違うサイズを適用したい場合のみ変更のcssを記述していく。\r\n\r\n◯css整理\r\n・デバイスの大きさに合わせてcssを適用出来るように、ベースとなるcssファイルを作成した。それを一つのファイルにまとめ、それをメインcssとつなげることが出来た。\r\n・cssファイルを整理すると、インポートのパスが間違っているとエラーが出た。ファイルの階層を記述することで、解決した。\r\n','なし','エラーが出てからパスの変更を始めた為、時間を要した。同時進行で進められるようにしていきたい。','現在はスマホが主流となっている為、モバイルファーストの考え方を熟知していきたいと思う。モバイルに合わせてcssの大きさを考えるのは難しい為、調べながら行っていきたい。','なし\r\n','・メイン画面の作成\r\n・モバイルに合わせたcssの記述。（ヘッダー部分）','2022-02-05 13:23:04.490562','2022-02-05 13:23:04.490562'),(128,'2021-03-29',8,30,'メインタイトルの作成','◯タイトル文字\r\n・グーグルフォントを使用する。Udemy講座で実践したことがある為、スムーズに検索し、自分の反映したいフォントを見つけることが出来た。htmlのheadにリンクしたが、フォントが変化しない。erb形式を取り入れるも、反映されない。もう一つはcssにインポートする記述もある。その記述も試してみることにした。始めはどこにそのインポート文を書けばいいか不明だった。しかし、ネット検索やrailsの考え方を自分なりに考えて取り入れた。試行錯誤する内に、反映された。基本的には一つのフォントで、英字と日本語を出力していきたいと思う。\r\n\r\n◯配置\r\n・タイトル文字を画面中央に配置したい。始めはtext-alian:centerで試すが、動かない。ネットで調べてボックスに対して、上下左右に中央に揃える効果方法を見つけ、実践する。transformプロパティを使用して、動かす部分に始めは苦戦した。もう一度上記のプロパティについて調べて、理解した上で実践した。自分で記述しながら、要素が動くことを確認しより理解を深めることが出来た。ボックスの形状、インラインブロックやブロック要素なども改めて知り、それに合わせて記述することを学んだ。\r\n・position:abusoruteやrerativeなどの指定方法についても、繰り返すことで理解を深めることが出来た。\r\n','グーグルフォント適用までに時間を要した。headについて知識不足な為、今後追加する時に合わせて覚えていきたい。','なし','苦手としていたボックスの動かす記述について、理解することが出来たと思う。理解出来なくても繰り返し挑戦することで、出来るようになることが分かった。試行錯誤して自分のやりたい効果を反映できたら、とても嬉しい。この気持ちを大切に勉強を続けていきたい。','なし','レポート・ワーク部分作成','2022-02-05 13:24:21.579964','2022-02-05 13:24:21.579964'),(129,'2021-03-31',5,30,'・レスポンシブデザイン適用確認 ・ワーク部分作成','◯レスポンシブデザイン\r\n・開発中のサイトから検証をしながら、確認した。デスクトップのウィンドウでは画面の大きさに合わせて横幅が変化した。しかしiPhoneになると反映されていない。メディアクエリを見直したり、幅の設定がおかしいのかと考えた。しかしそれが原因ではない。\r\n（原因）\r\n・開発中にvsコードとGoogleを２分割で作業行っていた為、画面の比率が違うように表示されていたようだ。2分割を外すと綺麗に配置された。\r\n\r\n◯ワーク部分作成\r\n・フレックスプロパティを使用して、要素を横に並べ今後作ったサイトを表示出来るようにした。現在はサイトがない為、濃いピンクの枠線で囲んでいる。\r\n\r\n◯フッター作成\r\n・トップhtmlにフッターを記述したところ、ブラウザにはヘッダーの下に配置される。検証してみると、ボディはフッターの下にある。\r\n（試したこと）\r\n　１．ポジションを指定して画面の下側に配置。しかし以前と変わらず、上　の方に配置されている。ボックスの中では下側での配置と表示されてい　　る。\r\n　２．メインhtmlのフッターとヘッダーの間にmainタグを挿入し、実行。し　かし小さなボックスの空白が出来て変化なし。\r\n　３．メインhtmlの中にあるyieldに注目。それは外部ファイルが読み込まれ　る　為、これをメインhtmlのヘッダーとフッター間に入れてみる。フッ　　ターが一番下に表示されるようになった。\r\n\r\n・フッターの中にリストを作成し、ヘッダーと同じ文字を記述。スマホのフッターは調べた所縦並びになっていることが多いと感じた。文字がみやすいように工夫しなければいけないと感じた。flex:rowやcolumを順に試しながら、どのように配置したら見やすいかと考えて行った。\r\n\r\n・命名規則の間違い\r\n　始めはハイフンでフッターにクラス名をつけている。しかしcssの記述は何度も見直してスペルミスや記述ミスがないが、cssが適用されない。もしかしたら命名規則が間違っているかもと思い、_に変えてみると実行出来た。\r\n\r\n・コピーライト \r\n　著作権を示すマークは©。altキーとGをキーボードで打つと表示出来る。\r\n','・レスポンシブデザインについて理解してきたが、小さなエラーが出てくると不明な点がある。','なし','・理解が浅い所もあるが、間違いに気付き自分のしたいコードを記述出来るようになってきた。ここに配置をする為には、どのようにしたら良いかと考え、実行出来るようになってきたように思う。','なし','・スマホを横にした時に適用されるcssの記述。\r\n・トップページに葉のイラストを散りばめて配置。\r\n','2022-02-05 13:25:41.843259','2022-02-05 13:25:41.843259'),(130,'2021-03-30',6,30,'レポート部分作成','◯花枠を横に並べる\r\n・リスト表示している月の文字の後ろに花枠をのせたい。リストまたはボックスに対してフロートをかけるのかに始めは疑問をもつ。検索を調べるとぼボックスにフロートをかけているものが多かった。ポジションを指定することで、動かすことが出来ると判断した。また調べる中でフレックスを使って要素を並べているものもあった。講義の中で習ったこともある為、今回はこれを使おうと決めた。トランスフォームプロパティを使用して、動く場所を指定することで文字の後ろに花枠を移動することが出来た。花枠を移動するまでには、少しずつ数値を変えたりポジションの指定場所を変更したりと試行錯誤しながら取り組んだ。\r\n\r\n◯花枠をレスポンシブデザインに反映させる\r\n→スマホでは花枠の表示を２つずつ表示させる。iPadは３つ、デスクトップは４つずつ並べて表示させたい。\r\n・予め用意していたブレイクポイントのcssファイルに差分を記述した。しかし反映されない。＆の記述方法が間違っているかもしれないと確認しながら行ったが、意味がなかった。もっと遡りcssファイル自体がベースのcssと繋がっていないのではないかと予想する。試しにデスクトップ用ファイルに背景色を赤指定した。しかし反映されない。繋がっていないことにきづくことが出来た。\r\n↓メディアクエリの確認\r\n・各デバイスの大きさに合わせて保存しているファイルを確認したが、おかしな点はない。ファイルの階層パスが間違っているかもしれないと思い、詳しく記載したが、反映されない。\r\n・style.scssのファイル名がフォルダ名と一緒だからと考え、screeenに変更。しかし反映なし。\r\n・cssファイルの読み込み順ではないか。当たり！下記に記す。\r\n（原因）\r\n・メインcssの上部にimportしていたが、それを始めに書くとそのファイルが先に読み込まれて他のものは上書きされていた。その為、メインcssの最後にimportしてみると、反映されるようになった。\r\n\r\n','なし','・htmlのhead部分は記述する順番があることを知っていたが、cssにもあるとは知らなかった。次回から気を付ける。','自分で予想して一つひとつ確認しながら、エラーを解決することが出来た。一つずつ解決するごとに理解不足の部分が分かり、合わせて学習出来ている。同じ間違いはしないように気をつけていきたいと思う。','なし','・ワーク部分の作成\r\n・レスポンシブデザインにより近づける。\r\n','2022-02-05 13:26:48.340261','2022-02-05 13:26:48.340261'),(131,'2021-04-01',8,0,'・メイン画像の追加作成。 ・トップページに背景に葉っぱを散らすデザインの導入。','◯メイン画面の追加\r\n　背景に葉っぱをちらす際にどこからその葉っぱがきたかを連想できないデザインになっていた。その為、木をメイン画面に取り入れることにした。\r\n\r\n・フォトショップを使ってメイン画面の作成。\r\n　フリー素材を利用して、木・芝生・花部分を組み合わせる。草原に花や木が生えているイメージを持ち、配置をした。作ったレイヤーを一つの画像に変換し、png素材としてpcに保存した。\r\n　画像の背景はcssで記述したものを適用させたい為、メイン画像の背景は透明に設定。花は茎や葉っぱ部分はブラシツールを利用して配置した。ブラシツールは設定によって様々な描画になった。納得のいく描画になるまでに時間を要した。\r\n\r\n・実際に開発環境に取り入れる。\r\n　フォトショップで保存した画像データの大きさはデスクトップサイズ。しかし現在開発を進めているサイズはスマホ対応。そのまま画像を読み込むと横幅が合わず画像が横幅のみ縮小され、ずれて見える。その為、画像の大きさをスマホの大きさにもう一度フォトショップで作り直し、読み込むことで解決した。\r\n\r\n◯トップページの背景に葉っぱを散らす\r\n・葉アイコンの作成\r\n　メイン画面で使用した木の葉っぱ部分を切り取り、pngに保存した。\r\n・実際に導入\r\n　始めに読み込むとメイン画面の一番左上に配置される。そこから移動したい為、ポジションを指定。トランスフォームプロパティを指定して場所の移動。そこからrotateプロパティで画像の向きを調節した。\r\n\r\n◯メイン画像変更に伴いずれてしまったメインタイトルの配置\r\n　前回配置したのは、画面の横幅は中央揃え。縦幅はそのボックスに合わせて中央に合わせた。メイン画像変更によりメインタイトルの文字がずれる。画像のレイアウト的には左上に文字をもってくると、見栄えがいいと感じた。トランスフォームを消して、様子をみる。左上に文字がくるが、上すぎる。トランスフォームを使用して、調節した。\r\n','なし','なし','作っている中でデザインの追加したい部分が出てきた。また少し物足りないと感じていたデザインの確定が出来たように思う。フォトショップ で画像を作る工程は少しずつ慣れ、pngに変換するのも出来るようになった。','なし','・ハンバーガーメニューを押すとリスト表示したい。','2022-02-05 13:28:43.115481','2022-02-05 13:28:43.115481'),(132,'2021-04-02',4,0,'・ハンバーガーメニューを押すとリスト表示したい','◯アイコンをクリック出来るようにする\r\n・ネットでハンバーガーメニューについて調べる。以前ハンバーガーメニューの見た目部分を作成していた。そのやり方では出来ないと判断した為、一度コメントアウトしてネットで調べてコードを真似て記述した。コードを記述して更新するも、全て綺麗に反映されていない。sassの記述になっていないと考え、&を子要素につけて様子を見た。それで反映される部分もあるが、全体的には表示されない。一度消して再入力をしたが、結果は変わらない。\r\n・違うメニュー作成方法に挑戦する。しかし先ほどとは違う内容のずれが生じる。\r\n・Youtubeの動画を見て、一から勉強する。\r\n・Udemy講座のハンバーガーメニュー講座を見返す。しかしjsを使った記述方法だった為、使えない。\r\n\r\n','・ハンバーガーアイコンの見た目を作成出来るが、アイコンをクリックした時の挙動をどのように設定したら良いかわからない。','なし','習っていないセレクタ名が出てきた。またネットの記事によって様々な実装方法があり、戸惑った。自分の現在の知識で実装出来るクリック方法を探していく。','なし','ハンバーガーメニューの実装','2022-02-05 13:29:43.640879','2022-02-05 13:29:43.640879'),(133,'2021-04-03',2,0,'ハンバーガーメニュー実装','◯動画で方法を勉強。\r\n・Youtubeにある動画をみる。この動画はハンバーガーメニューの設定だけでなく、配置の意味やプロパティの意味を詳しく説明していた。疑問になっていた部分を解決出来、実際に真似て実装した。その結果、少しずれはあるものの、自分のやりたいデザインに近く反映された。そこからコードを一つひとつ確認しながら、微調整した。\r\n\r\n◯配置した後に、自分のやりたいデザインに近づける。\r\n・メニューを開いた時にデフォルト設定は薄い黒色。それだと暗いまたは怖い印象がある為、背景と同系色を設定。しかし色が被りいまいち。白色で半透明を実行すると、納得いくデザインに近づいた。\r\n\r\n・リストの余白を調節。左右は１０px、上下はデザインに合わせて余白を設定。\r\n\r\n・リスト調節後、上部にある×ボタンがずれる。二つのボックスが微妙に重なり、ずれていることが分かった。少し時間を要したが、配置したい場所に移動することが出来た。\r\n\r\n◯スマホ画面を横にすると、メイン画像が横に伸びる。\r\n・原因は画像を幅：高さともレスポンシブ対応が出来るように、100%で記述していたことだった。画像を違うものに変えてみた。しかし、違うサイズになると変に縮小や拡大をしてしまう。ネットで方法を検索するも、始めは普通の表示方法しかヒットしない。検索を進める中で、一つ気になる記述を見つけた。max-widthやmin-widthを使用して、設定する方法。初めて目にする設定方法だった。どちらもそれ以上になるとその設定を反映しないという記述方法。モバイルファーストで進めている為、小さい画像を合わせて調節した。\r\n\r\n\r\n\r\n\r\n・上記の記述に合わせて、画像の大きさは小さいものを用意するのでなく、大きい物を使って縮小していく形が良いと記載があった。小さい画像を設定すると、大きなデバイスによっては画像が荒くなってしまう。その方法を元に元の画像サイズを設定し、上記のように記述してみた。すると、どのデバイスでも画像比を綺麗に保ち表示出来ていた。\r\n','なし','なし','・ハンバーガーメニューの実装方法を理解するまでに、多くの時間を要した。自分の知識不足だが、色んな方法を使って自力で解決出来た。途中で諦めそうになったが、試行錯誤を続けてよかった。','なし','・画面サイズが４８０以上の表示を整える。（今日の続き）','2022-02-05 13:30:39.097195','2022-02-05 13:30:39.097195'),(134,'2021-04-04',4,0,'・480のサイズに合わせてメインタイトル表示','◯タイトルを指定位置に固定。\r\n・スマホ対応の設定はすべて綺麗に配置することが出来た。しかし、デバイスが変化すると文字の位置がずれる。またフォントサイズも小さく感じる為、大きくしたい。以前設定したブレイクポイント480upファイルに差分を追加。更新して確認すると、スマホデザインの方も大きくなって表示される。\r\n\r\n・記述方法の確認（記述順）\r\n　sassの記述方法が間違っているかを確認。親要素や子要素に合わせて階層を確認したが、問題があるようには見えない。次にセレクタの優先順位が問題ではないかと思った。ネットで少し復習してからコードを確認するも、問題は見られない。また詳細度も関係あるかもしれないと思い、親要素のクラスなども含めて、詳しく記載した。それでも反映されない。\r\n\r\n・メディアクエリの問題\r\n　そもそもメディアクエリが読み込まれていないのはでないかと想定。試しに簡単にボディの背景色を変更。しかしモバイルサイズの色も変更してしまった。メディアに対しての変更が反映されていないことが分かった。原因としてはインポートされている場所だと分かった。以前配置した時は読み込まれていると勘違いしていた。その時は下でインポートしているファイルが最後に反映されている形だった。そうではなく画面に合わせてそのcssを適用させたい。\r\n\r\n・インポートの記述間違い\r\n　ファイルインポート記述が間違っていると思い、確認した。しかしネットを使い情報収集しても、以前調べた内容と変わらない。自分で考え記述方法を変えてみた。メインcssの下にファイルをインポートし、そのファイル自体にメディアクエリを設定し、その中に記述していく方法を考えついた。試しに一つのファイルで実行してみると、反映された。原因はファイルのインポートとメディアクエリがうまく読み込めていなかったことだった。\r\n','・メディアクエリについて理解が浅かった','・メインcssについて、理解不足があり解決までに時間を要してしまった。','ネットにある情報や講義の内容を設定したら、全て上手くいくわけではないと知った。今のrailsやcssによって、変わってくることを理解した。自分の開発環境に合わせてやっていくことも視野に入れて、進めていくようにしたい。','なし','・メインタイトルを画面に合わせて綺麗に配置。','2022-02-05 13:31:39.909324','2022-02-05 13:31:39.909324'),(135,'2021-04-05',5,0,'・メイン画面をデバイスのサイズに合わせて変更する。 ・タイトル文字の大きさ確認。 ・プロフィールページの作成。','〇メイン画面に合わせてボックス内のサイズを図り、それに対応した比率の確認をする。比率を計算して、差分のみを対応のデバイスcssに記載した。\r\n\r\n〇文字の大きさ\r\n・文字の大きさはデバイスによって、かなりの差がでた。少し小さいと感じる場合は、大きくしたり調節を行った。しかしpcだとこの大きさが良いという比率があるのは、以前学習した為今後変更を加えていきたい。\r\n\r\n〇プロフィールページ作成\r\n・コントローラとビューそれぞれにファイルを新規作成した。profiile\r\nとファイル名をつけ、統一した。\r\n・ｈ１タイトルの大きさ調節。\r\n・名前や生年月日を記載する時に、リスト表示またはｐタグの表示の二つで迷う。名前は記述する文字が短い為、リストでまとめ配置することにした。またその下に経歴を用意し、その部分はpタグで囲んだ。\r\n・flexを使用して、リストを横並びに変更。全ての要素が横に並んだ。\r\n・見出し文字は大きさを少し調節した。\r\n','なし','なし','・ビューやコントローラの仕組みを忘れていなかった為、スムーズに新規ファイルを作成することができた。今後も新規ファイルを多く作成する為、ファイル整理をしながら、進めていきたい。','なし','・プロフィール画面の作成','2022-02-05 13:32:32.922791','2022-02-05 13:32:32.922791'),(136,'2021-04-06',8,0,'プロフィール画面の作成','〇文字入力・配置\r\n・名前や生年月日を記載する時に、リスト表示またはｐタグの表示の二つで迷う。名前は記述する文字が短い為、リストでまとめ配置することにした。またその下に経歴を用意し、その部分はpタグで囲んだ。\r\n・flexを使用して、リストを横並びに変更。全ての要素が横に並んだ。\r\n・見出し文字は大きさを少し調節した。\r\n\r\n〇その他気になる部分の修正を適宜行う。\r\n','なし','なし','・見つけた訂正を一つずつ処理していくことが大切だが、現在は作成中に追加があることも多い為、何度も変更することになる。その為、文字の大きさや余白は最後に設定することとし、進めていきたいと考えている。','なし','プロフィール画面の完成','2022-02-05 13:33:33.925904','2022-02-05 13:33:33.925904'),(137,'2021-04-07',4,0,'・パソコンのデータ移行（macからWindowsへpc移行）','◯Docker起動\r\n・Dockerデスクトップをダウンロードして、サインインする。スタートして起動した状態にする。\r\n\r\n◯macからWindowsにデータを移行。ポートフォリオ作成中データのみ。\r\n・データを移行する手段として、自分が知っているのはGoogleドライブである。その為、ドライブにフォルダをアップロードした。するとかなりの時間がかかることに気づく。\r\n・もう一つの作業として、ギットにコミットすることにした。やり方はネットで調べながら、最初から行った。ターミナルを使用しながら、試行錯誤してギットに上げることができた。新しいpcでギットにサインインしてから、ダウンロードを行う。ドライブに加えてかなりの早い速度でデータ移行することができた。ギットは開発において必要なものの為、使えるようにしていく。\r\n\r\n◯エラー処理\r\n・データ移行した際にまたDockerで起動しようとすると、エラーになる。Windowsに変わり、少し変更しなければならない部分があるようだ。\r\n・ファイル形式はWindowsのデフォルトはcrlfである。開発するときはlfでないといけないとある。一括変換できる方法を調べるも、うまくいかない。\r\n・Dockerファイルのエラーが出た。自分で解決できなかった為、助けをもらい進める。Dockerファイル内のコピー部分が何度も上書きされていた為、エラーが出ていた。コピーを消して、上書きをなくした。またバージョンが変わっていた為、起動しない原因だということも合わせてわかった。\r\n・gimファイルロックはバージョンを更新するときは、一度消してまた作られるようにする。以前学習していたときに最初から空のボックスを用意した為、それと同様の考え方で理解した。\r\n\r\n\r\n\r\n\r\n\r\n◯新規ターミナルの導入\r\n・今まではmacのデフォルトのターミナルを使用していたが、Windowsで似たような操作が可能なツールを入れた。それに伴い、Dockerを動かすときはdocker-compose.exeと後ろにこの文字を入れることとなっている。またrunさせたいときはその後ろにexceと入れることも忘れないようにしたい\r\n','・ターミナルからエラーが出たときにその内容を一つずつ理解して、解決することが難しい。一つのエラー文だけで理解できないこともある。一つずつ確認しながらも、エラーの内容をしっかりと把握できるようになりたい。','なし','macとWindowsでこんなにも違いがあることを初めて知った。いい経験になったが、エラーを解決するまでに多くの時間を要してしまう。その背景として、自分の知識不足によるものだと痛感した。次回、新規開発フォルダを作成するときはファイルの中身などにも注目し、少しでも理解してから導入していきたいと思った。','なし','・プロフィール画面の完成','2022-02-05 13:35:05.718811','2022-02-05 13:35:05.718811'),(138,'2021-04-08',5,0,'・プロフィールページのデザイン・配置','〇個人情報部分の配置\r\n・ディブタグを使って、３つのリストを配置する。それをフレックスで横に並べて均等に中央揃えをしたい。しかし均等な間隔で配置はされるが、画面上での中央揃えにはなっていない。\r\n・次に全てディブタグで囲み、それぞれのボックスを中央揃えにしてみたが、思うように配置されない。またレスポンシブデザインに対応できないと考え難しいと感じた。\r\n・全て元に戻して、もう一度動作確認してみた。その後リストをまとめているディブにフレックスを指定する。水平配置は中央、スペースを均等にあけるプロパティを指定することで、解決した。\r\n\r\n〇ページの余白が必要な箇所に10pxずつ指定。\r\n\r\n〇経歴部分\r\n・タイトルや注意書き部分は同じ階層にまとめ、見やすくコードを書いた。\r\n・業務内容の部分は見やすいように、リストの前に点をつけた。しかしデフォルトで設定してあるlist-styleを使用すると、点の大きさが大きかった為文字をして入力することにした。\r\n・業務内容の左右に10pxの余白をあけて見やすく配置。\r\n\r\n〇途中からブラウザの更新が効かなくなり、作業停止。\r\n・最初にした解決策はブラウザのキャッシュを消すこと。消したが更新されない。\r\n・vsコードとdockerがうまく動いていないかもしれないと考え、一度サーバーを落とした。再起動すると、反映されている。そのまま違うコードを打ち込んで更新するが、反映されていない模様。再度キャッシュしても変わらなかった。\r\n・自分で解決することが出来なかった為、エラー内容を調べてもらう。railsの設定ファイルを見直したり、ログファイルを確認するも変わらない。原因を探っている所、プーマを再起動を行った。プーマにキャッシュが溜まっていたことが原因で更新されないようだった。\r\n','・ブラウザのキャッシュが溜まっているとそれを消せばいいと知っていたが、今回はそうはいかなかった。次回同じエラーが出た場合は、プーマの再起動も視野に入れていきたい。','なし','・ディブタグを多様することにおいて、こんなに記述していいのかと疑問に思う。今回少し減らして記述をしていたが、ディブタグがなくて配置出来ないことが多かった。今後もサイト作成する中で理解していきたいと思った。','なし','・ワーク、コンタクト、レポートファイルの作成','2022-02-05 13:36:09.818438','2022-02-05 13:36:09.818438'),(139,'2021-04-09',5,30,'・ワーク、レポート、コンタクトページ作成 ・フォーク機能を使えるようにする。','〇ワークページ作成\r\n・vsコードで新規ファイル作成。\r\n・模擬サイトを表示する為、タイトル文字のみを設定。\r\n\r\n〇レポートページ作成\r\n・ドロップダウンメニューの作成。ブラウザで調べながら、自分のデザインに合わせてコードを記載した。\r\n・検索ボタンを作成。\r\n・上記で作成したボタンを横に並べて表示したい。フレックスを指定して、横に並べることができた。並べた際に上に配置予定だったボタンの内容について記載していた部分もまとめて横に表示したいと考えた。その際にpタグをボタンのグループに入れてみる。そうすると綺麗に横に並んだ。しかし全ての要素が中央に余白なしで表示されている。間に10pxずつの余白を設定した。\r\n・メイン部分はデータベースが出来てから移行する為、例として一つのボックスの大きさを指定して余白を用意した。\r\n\r\n〇コンタクトページ作成\r\n・フォームタグを使用して、作成していく。ブラウザで調べながら、設定した。\r\n・htmlを記述後に、cssを入力しようとした。しかし文字が黄色になり、打てない。その理由がわからず、一度cssファイルを消して見たが改善しない。\r\n一度サーバーやvsコードを再起動したら、治るかもしれないと思いpcを落とす。\r\n','・なぜcssファイルが適用されていない原因が追及することが出来ない。','なし','・htmlを記述するのは早くなってきたように思う。同じ項目の場所はコピーして効率性をあげることが出来た。cssファイルがなぜ動かないのか疑問の為、次回は解決したい。\r\n','なし','・コンタクトページ完成。\r\n・動かないcssファイルの原因を探る。\r\n','2022-02-05 13:37:13.916781','2022-02-05 13:37:13.916781'),(140,'2021-04-10',2,0,'・コンタクトフォームの作成 ・二日分の反省・勉強内容をまとめる','〇コンタクトフォームページの作成\r\n・フォーム全体を中央揃えにしたい為、フォームタグの中にディブタグを用意して中央指定した。しかし反映されない。コードを見直していると、ディブタグで囲んだ中でしか反映できないプロパティと気づく。ディブタグで全体を囲み、中央を指定すると解決することが出来た。\r\n・cssファイルの記述を細かく行う。文字間の調節をしたり、コンタクトフォームの見え方を考えて配置することが出来た。ボタンは見やすいように大きさを調節した。\r\n','なし','なし','・プロパティを指定するタグに注意しないといけないと感じた。一つ指定場所が違うだけで、大きな変化が見られることもある為気を付けたい。','なし','・作ってきたページをトップページのハンバーガーメニューにリンクづけする。','2022-02-05 13:38:05.697104','2022-02-05 13:38:05.697104'),(141,'2021-04-11',2,0,'・作ってきたページをトップページのハンバーガーメニューにリンクづけする。','〇ハンバーガーメニューにリンクを指定\r\n・ルビーの書き方である、＜％＝　link_to（）　％＞を使用する。第一引数に表示したい文字列、第二引数にパスを記述することで指定することが出来た。\r\n・画像も同様に指定した。少し形は違うが指定方法は一緒。\r\n＜％ link_to（第一引数：URL、第二引数：クラス付与）do ％＞\r\n	＜％＝　img_tag（画像パス指定）％＞\r\n＜％　end    ％＞\r\n→クラスを付与することで、cssでの記述ができるようにした。\r\n・ＵＲＬのパスを指定する時に、/をつけ忘れることが数回あった。パスを指定する時は忘れないようにする。\r\n','なし','なし','・以前はこのコードを見ても理解に苦しんでいたが、現在は意味を理解してコードを臨機応変に書き換えることができるようになってきている。','なし','データベース作成','2022-02-05 13:38:56.273634','2022-02-05 13:38:56.273634'),(142,'2021-04-12',5,30,' ・ブログ投稿ページに対応するデータベースの作成','〇データベース作成\r\n　ネットで方法を調べる中で、管理者が投稿できるサインイン式の方法を見つけた。最終的にはそのような形のシステムにしたいと考えていた為、見ながら実装していくことにした。\r\n\r\n・モデルの設定（２つのコントローラ作成）\r\n　ログインやログアウトなどの機能がある、フォームテキストを作成。また入力した時に自動でデータベースに保存されるように様々なファイルにコードを記載。全てのコマンドを打ち終わった所、エラーが発生。gemファイルの一文のコードが定義されていないと出ている。ネットで検索すると、ゲmファイルを変更したら、buildしなけらばならないとある。コマンドで実行すると、解決した。\r\n\r\n・user_curent.nameが定義されていない。ネットで調べながら考えた内容はnameというメソッドがないということ。その為、vsコード内のuserコントロールやルートを確認した。しかし見当たらない。どのようにコードを記述していいのかもわからなく、作業が滞っていた。\r\n\r\n（解決策）\r\n・そもそもメソッドと変更を使う方法を忘れていた。その為、一からrailsの機能について学習しなおしていく。\r\n\r\n〇プロゲート学習サイト\r\n・railsの基礎学習を最初から行う。データーベースの作り方やリンクタグの指定方法などを学んだ。\r\n','なし','・変数やアクションなどの構成を理解していなかった。プロゲートで再度学習することで、深く理解することが出来たと思う。','・基礎がしっかりしていないと意味がないと思った。ネットにある情報は基礎が出来ている前提としているものが多い為、今回は大きな反省となった。','なし','・rails学習を最後まで行う。\r\n・データベースを実際に実装していく。\r\n','2022-02-05 13:40:16.990306','2022-02-05 13:40:16.990306'),(143,'2022-01-06',5,0,'自作サイト','simple_calendarを日本語化したい。\r\n\r\nhttps://qiita.com/shimadama/items/7e5c3d75c9a9f51abdd5\r\n上記のサイトを参考にして、取り組む。\r\n順番どおりにすすめるも、docker-compose buildでエラーが発生。\r\nエラー内容から見て、どうやらgem \'rails-i18n\', \'~> 5.1 としたから。検索すると、気になる記事を見つける。バージョンが合わないとエラーが出ることがあると・・・現在使っているrailsのバージョンは6.0以上なので、それに合わせてgem \'rails-i18n\', \'~> 6.0.0\'に変更した。すると、次に進む。\r\n\r\nしかしまたエラー発生。configメソッドがないと言われる。\r\nよく見てみるとmoddle内に必要なコードを記載しておらず、外にあった。そのため、その中にいれると解決した。\r\nサイトの通りにymlファイルを２つ作る。それを設定するも、曜日の表示は変わらなかった。\r\nもう一度2つのファイルコードを見直すと、変数名がそもそも自分のサイトに適応するものではなかった。\r\n他サイトを見てみると、もっと簡単に日本化しているコードを見つける。application.rbに    config.i18n.default_locale = :ja\r\nと記述することで、日本語化できると。保存するも解決しない。\r\n一度サーバーを落として、再起動すると日本語化することに成功した。\r\n','どこでcssをいじればいいか不明だった。','ccsを見つけるまでに時間を要した。','簡単にカレンダーを実装出来るが、それ故にデザインを変更する時は難しくなることもあると感じた。','ネット検索','続き','2022-02-05 13:43:49.860017','2022-02-05 13:43:49.860017'),(144,'2021-11-03',8,0,'自作サイト','フォーム作成中につまづいた部分（まとめ）\r\n\r\n・有り、無し選択のラジオボタンを作成。普通のbuttonタグで作ればよかったが、どちらかのみ選択させたかった為、ラジオボタンの実装を試みる。\r\n\r\n        <div class=\"three_button\" id=\"condition_style\">\r\n            <%= form.radio_button :condition, :good %>\r\n            <%= form.label :condition, \"良い\",, {value: :good} %>\r\n            <%= form.radio_button :condition, :somewhat_bad %>\r\n            <%= form.label :condition, \"やや悪い\", {value: :somewhat_bad}  %>\r\n            <%= form.radio_button :condition, :bad %>\r\n            <%= form.label :condition, \"悪い\", {value: :bad} %>\r\n        </div>\r\n\r\nradio_button　第一引数にはname属性、第二引数にはlabelタグとの連携がわかるように同じに。\r\nlabel 第一引数にconditionとかきbuttonタグと関係しているコードをかく。\r\n始めは上記の内容だけで表示はされたが、ボタンがラベルとボタンとが離れてしまう。ネットで調べてオプションでvalueでbuttonの第二引数と同じ値を入れると連携出来ることがわかった。\r\nイメージしていたことを実装することができた。しかし、クリックされた時の挙動を確かめることにすると、上手く動かない。\r\n\r\njavascriptではgetElementsByIDというメソッド名を使って、idを取りそのクリックした挙動を制御出来る。始めはbuttonのid名がついてない為、オプションでつけてみた。しかしエラーになるかクリックされた挙動が見れない状況が続く。ネットで検索しながら解決策を探していると、一つ気になるサイトを見つける。\r\n\r\n\r\n\r\nhttps://thr3a.hatenablog.com/entry/20191016/1571155260\r\n\r\nこのサイトからヒントを得ることができた。\r\n\r\n        <div class=\"three_button\" id=\"condition_style\">\r\n            <%= form.radio_button :condition, :good %>\r\n            <%= form.label :condition_good, \"良い\" %>\r\n            <%= form.radio_button :condition, :somewhat_bad %>\r\n            <%= form.label :condition, \"やや悪い\", {value: :somewhat_bad}  %>\r\n            <%= form.radio_button :condition, :bad %>\r\n            <%= form.label :condition, \"悪い\", {value: :bad} %>\r\n        </div>\r\n\r\nradio_button　第一引数にはname属性、第二引数にはvalue属性が入る\r\nlabel 第一引数と第二引数の合わせた値がid名となることで完成させることができた。\r\n上記のヒントを得てからクリックイベントを発火させることが出来た。\r\nコードが見やすくなり、id名も完結したので良かった。\r\n忘れないようにしたい。\r\n\r\n普段使っているpcからmacにデータを移行。git hub を使ってソースコードのクローンをした。\r\nその際に不要なファイルは入れないように、gitnoneを使用した。\r\nmacでクローンして起動した時javascriptに対して、webpacckerが入っていないとエラーが出る。\r\nコマンドでwebpacker:installとして、webpaccker:compileを入力することで解決した。\r\nこれだと毎回環境を構築する度に、入力しなければならない。その為、dockerfileに保存すると毎回dokcer-compose up 時に入れられる為楽。\r\n\r\n\r\n\r\nコミットの大切さ\r\nmacでコミットした内容をプッシュすることを忘れていた。fetchボタンを押すことで、macで操作した内容が入ってくる。その前に自宅のpcで保存してコミット前もデータがある。その上でmac上でコミットし、自宅pcでコミットしようとしたら、スタック（退避する・・・コミットを隠す）するかコミットするかを選択するエラーが出た。jqueryを古いバージョンで指定していた為、今回自宅pcで書いたファイル達を退避することにした。そうすることでmacでコミットした内容をダウンロードすることが出来た。\r\nhttps://qiita.com/chihiro/items/f373873d5c2dfbd03250\r\n\r\ncdocker-compose コンテナについて\r\nhttps://qiita.com/gyu_outputs/items/5178a539ba0c08b8b36e\r\n\r\ndokcer-compoose を使用している為、ネットで記載されいる文の前にdocker-compose run web と入力する必要があった。\r\n\r\n今回build installをしたいが、docker-compose run web rails bundle installとして、railsが入っていただけで上手くいかなかった。その作業に三時間程費やしてしまった為、覚えたい。bundle installしたい場合はdocker-compose buildすることで上手くいく。それを忘れていて途中から思い出した。記憶力がない。\r\n\r\n\r\nmacで入れたファイルがcrlfになっていて、改行エラーが起きていた。下記で解決。\r\nhttps://yu-report.com/entry/gitcrlf/\r\n\r\njquery　インストール\r\nhttps://qiita.com/tatsuhiko-nakayama/items/b2f0c77e794ca8c9bd74\r\n','なし','なし','dcokerの意味を理解することが大切だなと思った','ネット検索し、まとめた','続き','2022-02-05 13:45:53.920071','2022-02-05 13:45:53.920071'),(145,'2021-06-01',0,0,'6月以降に記載について','６月以降はサイト作成を少しでも進める為、振り返りの入力はしていない。\r\n保育士としての仕事も併行している為、\r\n平日は最大：3時間、休日は8時間の勉強時間を設けていた。','なし','なし','なし','なし','なし','2022-02-05 14:18:19.818411','2022-02-05 14:18:19.818411');
/*!40000 ALTER TABLE `study_records` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2022-02-20 14:42:09
